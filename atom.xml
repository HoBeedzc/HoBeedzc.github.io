<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hobee&#39;s Blog</title>
  
  <subtitle>Never Settle</subtitle>
  <link href="https://hobeedzc.github.io/atom.xml" rel="self"/>
  
  <link href="https://hobeedzc.github.io/"/>
  <updated>2022-04-19T16:33:53.155Z</updated>
  <id>https://hobeedzc.github.io/</id>
  
  <author>
    <name>hobee</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>域名搞事情|利用飞书建立私有域名邮箱</title>
    <link href="https://hobeedzc.github.io/2022/04/20/%E5%9F%9F%E5%90%8D%E6%90%9E%E4%BA%8B%E6%83%85-%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%89%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/"/>
    <id>https://hobeedzc.github.io/2022/04/20/%E5%9F%9F%E5%90%8D%E6%90%9E%E4%BA%8B%E6%83%85-%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%89%E5%9F%9F%E5%90%8D%E9%82%AE%E7%AE%B1/</id>
    <published>2022-04-20T02:14:14.000Z</published>
    <updated>2022-04-19T16:33:53.155Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由 Hobee 原创，并仅在本站发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或邮件 <a href="mailto:me@hobeedzc.cn">me@hobeedzc.cn</a> 联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>域名</p>]]></content>
    
    
    <summary type="html">物联网作为如今十分热门的话题之一，今天来介绍一下什么是物联网平台</summary>
    
    
    
    <category term="域名" scheme="https://hobeedzc.github.io/categories/%E5%9F%9F%E5%90%8D/"/>
    
    
    <category term="域名" scheme="https://hobeedzc.github.io/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>科普|什么是物联网平台</title>
    <link href="https://hobeedzc.github.io/2020/07/21/%E7%A7%91%E6%99%AE-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/"/>
    <id>https://hobeedzc.github.io/2020/07/21/%E7%A7%91%E6%99%AE-%E4%BB%80%E4%B9%88%E6%98%AF%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0/</id>
    <published>2020-07-21T02:14:14.000Z</published>
    <updated>2022-04-19T16:33:22.932Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在本站发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或邮件<a href="mailto:me@hobeedzc.cn">me@hobeedzc.cn</a>联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>最近放暑假，我一个偶然的机会接触到物联网、物联网平台及其应用，进行简单的了解之后觉得很有意思，就想写一个系列来完整介绍一下物联网的情况。</p><p>现在网上的解释都十分高大上，让人感觉物联网是十分高精尖的技术，离普通老百姓很远。但事实恰恰相反，我们现在每个人家中几乎都有物联网设备，只是很多人没有感觉罢了，我结合自己的理解，争取用最简洁的语言来介绍物联网到底是个什么鬼。</p><h2 id="什么是物联网"><a href="#什么是物联网" class="headerlink" title="什么是物联网"></a>什么是物联网</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>首先看一下<a href="https://baike.baidu.com/item/%E7%89%A9%E8%81%94%E7%BD%91">百度百科</a>对物联网的定义：</p><blockquote><p>物联网是通过射频识别、红外感应器、全球定位系统、激光扫描器等信息传感设备，按约定的协议，把任何物品与互联网相连接，进行信息交换和通信，以实现对物品的智能化识别、定位、跟踪、监控和管理的一种网络。</p><p>-百度百科</p></blockquote><p>说了一大堆，其实就是想说物联网是通过各种传感器和协议，将物品和互联网相连并进行一定的信息传输，实现远程操作的技术。再概括一下就是物联网是“万物互联的网络”，原来的互联网时代实现的是人人之间的信息交换，而物联网时代将要实现的是人物、物物之间的信息交换。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>物联网技术可以应用在生活的方方面面，包括工业、农业、环境、交通等等，物联网的加入极大的推进了这些产业的发展。另外，在居家、教育、医疗等老百姓常见的生活场景上，物联网的应用也是极大的改变了原有的生活方式。</p><h4 id="智慧交通"><a href="#智慧交通" class="headerlink" title="智慧交通"></a>智慧交通</h4><p>现在几乎每个人出行都会带上一个GPS（车载或手机），当手机使用高德地图并且接入互联网的时候，我们的出行工具就变成了一个简易的物联网设备。它可以发送我们的位置信息，并接收前方的交通流量信息，判断是否产生拥堵、是否需要换路等等，这完全符合物联网技术中识别、交换、处理信息的定义。</p><p>值得注意的是，我们获取的信息是否拥堵、是否需要换道这种经过计算分析之后的信息，而非前方路段有多少车这种描述性信息，因此这个过程中的运算是在云端完成的，也就是我们常说的云计算技术。相反的，如果我们接收到的是描述性的信息并在自己的设备上进行处理，这就是边缘计算技术。如果是收集到信息，先处理再发往云端汇集，这就是云边协同技术。（这是高度概括而言的，真正的云计算、边缘计算、云边协同技术要比这复杂很多）</p><h4 id="智慧家居"><a href="#智慧家居" class="headerlink" title="智慧家居"></a>智慧家居</h4><p>智能家具在前几年就出现了，这几年的发展更是突飞猛进。智能家具的产品布局是十分广泛的，以米家产品线为例，小到米家智能台灯、米家智能插座，大到小米智能电视、小米智能冰箱、小米智能洗衣机等等，几乎所有智能家具产品都可以看到物联网的身影。</p><p>结合米家APP，我们可以很轻松的实现对物联网设备的接入、监管和控制，甚至实现一些设备之间的联动。比如在你下班回家之前帮你烧好水、开好空调，在你离开家后自动开始扫地等等，这些都是现代生活中比较常见的智能场景。随着人工智能、物联网技术的不断发展，人类认知水平的不断提高，会有越来越多的物联网设备进入家中，也会有更加智能化的场景出现。</p><h3 id="瓶颈"><a href="#瓶颈" class="headerlink" title="瓶颈"></a>瓶颈</h3><p>物联网发展到现在，技术进步的同时也出现了很多问题。其中最复杂、最难解决的问题就是协议、标准的不统一，物联网终端说白了就是一个传感器（这里没有任何贬低的意思），按理说学过C++的人都可以进行开发，这也就意味着这个行业的门槛很低，而基于数据安全考虑，每个厂商都有一套自己的传输方式、传递协议，并且没有一个可以独当一面、确定行业标准的大厂，复杂多样的协议就因此而生。随着进一步的发展，这种百花齐放的协议、接口逐渐褪去红利，成为了阻碍行业前进的最大问题。</p><p>其他一些问题包括成本高、安全性不足等等虽然也是物联网进步的障碍，但与协议比起来，还是比较容易解决的。</p><h2 id="什么是物联网平台"><a href="#什么是物联网平台" class="headerlink" title="什么是物联网平台"></a>什么是物联网平台</h2><p>既然了解了什么是物联网，那物联网平台也就比较好理解了。</p><p>说简单一点，其实刚刚智慧家居中提到的米家APP就可以理解为一个简单的物联网平台，实现了不同种类、不同型号的物联网设备的接入，并且可以通过网关实现对设备状态、信息的获取，还可以在不接触的设备的情况下实现对设备的远程操控。以上差不多涵盖了一个合格的物联网平台要实现的大部分功能，另外自动运维、设备数据的断点续传等等功能，属于物联网平台锦上添花的功能。</p><p>自动运维指的是设备可以远程升级（就是我们常说的OTA），以手机为例，我们的手机可以在接入互联网的情况下自动检查更新，使我们的设备时刻保持最新状态（当然，是在你允许的情况下）。自动运维就可以让你的物联网设备时刻保持最新（当然，也是在你允许的情况下），远程改bug、远程添加功能等等都是基本操作。</p><p>其实物联网平台诞生的最大意义并不是多个设备统一管理、智能场景的实现，而是其在很大程度上解决了刚刚提到的痛点问题，也就是协议多种多样、不同协议之间的设备无法通信的问题。平台上可以进行不同协议之间的转换（现在也只能覆盖主流协议），在同一协议下的不同设备就可以相互交流，上述的智能场景也就基于此而得以实现了。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>上述就是对物联网和物联网平台简单的介绍了，我不想用什么高大上的词汇和理论，那些东西在枯燥的论文和官方的定义中写的够多了，我力求用最通俗的话去解释物联网的种种东西。</p><p>我的知识水平也比较有限，可以写的就这么多了，如果内容出现了错误，请及时联系我，我会立刻改正。</p>]]></content>
    
    
    <summary type="html">物联网作为如今十分热门的话题之一，今天来介绍一下什么是物联网平台</summary>
    
    
    
    <category term="科普" scheme="https://hobeedzc.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    <category term="物联网" scheme="https://hobeedzc.github.io/categories/%E7%A7%91%E6%99%AE/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    
    <category term="物联网" scheme="https://hobeedzc.github.io/tags/%E7%89%A9%E8%81%94%E7%BD%91/"/>
    
    <category term="科普" scheme="https://hobeedzc.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>离散数学中英对照表</title>
    <link href="https://hobeedzc.github.io/2020/05/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <id>https://hobeedzc.github.io/2020/05/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E4%B8%AD%E8%8B%B1%E5%AF%B9%E7%85%A7%E8%A1%A8/</id>
    <published>2020-05-22T11:56:37.000Z</published>
    <updated>2020-05-22T11:59:44.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在<a href="https://hobeedzc.github.io/">本站</a>发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>众所周之，hobee在数学的学习方面就宛如一只菜鸡，只好通过不断复习和整理的途径来巩固自己辣鸡的数学成绩。主要是我真的什么也不会了啊（哭哭脸…那就从这里开始吧！</p><p>因为考核是候题目是英文的，所以我的整理也就用英文来叭（我也不想啊…</p><h2 id="中英术语对照表"><a href="#中英术语对照表" class="headerlink" title="中英术语对照表"></a>中英术语对照表</h2><p>为了防止之后我自己都看不明白，在梳理知识点之前我先写一份中英术语对照表好了。</p><h3 id="命题与逻辑"><a href="#命题与逻辑" class="headerlink" title="命题与逻辑"></a>命题与逻辑</h3><table><thead><tr><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th></tr></thead><tbody><tr><td align="center">Proposition</td><td align="center">命题</td><td align="center">Propositional variable</td><td align="center">命题变量</td><td align="center">Truth value</td><td align="center">真值</td></tr><tr><td align="center">Negation</td><td align="center">否定</td><td align="center">Logical operators</td><td align="center">逻辑运算符</td><td align="center">Compound proposition</td><td align="center">复合命题</td></tr><tr><td align="center">Truth table</td><td align="center">真值表</td><td align="center">Disjunction</td><td align="center">析取</td><td align="center">Conjunction</td><td align="center">合取</td></tr><tr><td align="center">Exclusive or</td><td align="center">异或</td><td align="center">Implication</td><td align="center">蕴含</td><td align="center">Converse</td><td align="center">逆</td></tr><tr><td align="center">Contrapositive</td><td align="center">逆否</td><td align="center">Inverse</td><td align="center">反</td><td align="center">Biconditional</td><td align="center">双蕴含</td></tr><tr><td align="center">Tautology</td><td align="center">永真式</td><td align="center">Contingency</td><td align="center">可能</td><td align="center">Logically equivalent</td><td align="center">逻辑等价</td></tr><tr><td align="center">Predicate</td><td align="center">谓词</td><td align="center">Propositional function</td><td align="center">命题函数</td><td align="center">Domain of discourse</td><td align="center">论域</td></tr><tr><td align="center">Existential quantifier</td><td align="center">存在量词</td><td align="center">Universal quantifier</td><td align="center">全称量词</td><td align="center">Free variable</td><td align="center">自由变元</td></tr><tr><td align="center">Bound variable</td><td align="center">约束变量</td><td align="center">Scope of a quantifier</td><td align="center">量词的作用域</td><td align="center">Argument</td><td align="center">参数</td></tr><tr><td align="center">Argument form</td><td align="center">参数形式</td><td align="center">Premise</td><td align="center">条件</td><td align="center">Conclusion</td><td align="center">结论</td></tr><tr><td align="center">Valid argument form</td><td align="center">合法参数形式</td><td align="center">Rule of inference</td><td align="center">推理规则</td><td align="center">Fallacy</td><td align="center">谬误</td></tr></tbody></table><h3 id="集合与关系"><a href="#集合与关系" class="headerlink" title="集合与关系"></a>集合与关系</h3><table><thead><tr><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th></tr></thead><tbody><tr><td align="center">Set</td><td align="center">集合</td><td align="center">element</td><td align="center">元素</td><td align="center">member of a set</td><td align="center">集合的成员</td></tr><tr><td align="center">Roster method</td><td align="center">枚举</td><td align="center">set builder notation</td><td align="center">集合生成公式</td><td align="center">empty set</td><td align="center">空集</td></tr><tr><td align="center">Universal set</td><td align="center">全集</td><td align="center">Venn diagram</td><td align="center">VN图</td><td align="center">set equality</td><td align="center">集合等价</td></tr><tr><td align="center">Subset</td><td align="center">子集</td><td align="center">proper subset</td><td align="center">真子集</td><td align="center">finite set</td><td align="center">有限集</td></tr><tr><td align="center">Infinite set</td><td align="center">无限集</td><td align="center">cardinality</td><td align="center">势</td><td align="center">power set</td><td align="center">幂集</td></tr><tr><td align="center">Union</td><td align="center">并集</td><td align="center">Intersection</td><td align="center">交集</td><td align="center">difference</td><td align="center">差</td></tr><tr><td align="center">Complement</td><td align="center">补集</td><td align="center">Symmetric difference</td><td align="center">对称差</td><td align="center">membership table</td><td align="center">成员表</td></tr><tr><td align="center">Function</td><td align="center">函数</td><td align="center">domain</td><td align="center">值域</td><td align="center">codomain</td><td align="center">陪域</td></tr><tr><td align="center">Image</td><td align="center">像</td><td align="center">preimage</td><td align="center">原像</td><td align="center">range</td><td align="center">值域</td></tr><tr><td align="center">Onto</td><td align="center">满射</td><td align="center">One-to-one</td><td align="center">单射</td><td align="center">Surgection</td><td align="center"></td></tr><tr><td align="center">Injection</td><td align="center">单射</td><td align="center">Bijection</td><td align="center">双射</td><td align="center">Inverse</td><td align="center">否</td></tr><tr><td align="center">Composition</td><td align="center">复合函数</td><td align="center">floor</td><td align="center">下取整</td><td align="center">ceiling</td><td align="center">上取整</td></tr><tr><td align="center">sequence</td><td align="center">序列</td><td align="center">Geometric progression</td><td align="center">几何级数</td><td align="center">arithmetic progression</td><td align="center">算术级数</td></tr><tr><td align="center">recurrence relation</td><td align="center">递推关系</td><td align="center">Countable set</td><td align="center">可数集</td><td align="center">Uncountable set</td><td align="center">不可数集</td></tr><tr><td align="center">alpha null</td><td align="center">阿里夫零</td><td align="center">Binary relation from A to B</td><td align="center">二元关系</td><td align="center">relation on A</td><td align="center">集合A上的关系</td></tr><tr><td align="center">Reflexive</td><td align="center">自反性</td><td align="center">symmetric</td><td align="center">对称性</td><td align="center">antisymmetric</td><td align="center">反对称性</td></tr><tr><td align="center">transitive</td><td align="center">传递性</td><td align="center">n-ary relation</td><td align="center">n元关系</td><td align="center">relational data model</td><td align="center">关系数据模型</td></tr><tr><td align="center">primary key</td><td align="center">主键</td><td align="center">composite key</td><td align="center">复合主键</td><td align="center">selection operator</td><td align="center">选择运算符</td></tr><tr><td align="center">projection</td><td align="center">投影</td><td align="center">join</td><td align="center">并</td><td align="center">digraph</td><td align="center"></td></tr><tr><td align="center">loop</td><td align="center">环</td><td align="center">closure of a relation R with respect to property</td><td align="center">关系R的闭包</td><td align="center">connective relation</td><td align="center"></td></tr><tr><td align="center">Path</td><td align="center">路径</td><td align="center">circuit</td><td align="center">圈</td><td align="center">$R^\star$</td><td align="center"></td></tr><tr><td align="center">equivalence relation</td><td align="center">等价关系</td><td align="center">equivalent class</td><td align="center">等价类</td><td align="center">partition</td><td align="center">划分</td></tr><tr><td align="center">Partial ordering</td><td align="center">偏序</td><td align="center">poset</td><td align="center">偏序集合</td><td align="center">comparable</td><td align="center">可比</td></tr><tr><td align="center">total ordering</td><td align="center">全序</td><td align="center">well-ordered set</td><td align="center">良序集</td><td align="center">hasse diagram</td><td align="center">哈斯图</td></tr><tr><td align="center">maximal element</td><td align="center">最大元素</td><td align="center">minimal element</td><td align="center">最小元素</td><td align="center">greatest element</td><td align="center">极大元素</td></tr><tr><td align="center">least element</td><td align="center">极小元素</td><td align="center">upper bound</td><td align="center">上界</td><td align="center">lower bound</td><td align="center">下界</td></tr></tbody></table><h3 id="图与树"><a href="#图与树" class="headerlink" title="图与树"></a>图与树</h3><table><thead><tr><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th></tr></thead><tbody><tr><td align="center">Graph</td><td align="center">图</td><td align="center">vertex&#x2F;node</td><td align="center">顶点</td><td align="center">edge</td><td align="center">边</td></tr><tr><td align="center">Directed graph</td><td align="center">有向图</td><td align="center">directed edge&#x2F;arc</td><td align="center">有向边</td><td align="center">multiple edges</td><td align="center">多重边</td></tr><tr><td align="center">loop</td><td align="center">环</td><td align="center">simple graph</td><td align="center">简单图</td><td align="center">multigraph</td><td align="center">多重图</td></tr><tr><td align="center">pseudograph</td><td align="center">伪图</td><td align="center">directed multigraph</td><td align="center">多重有向图</td><td align="center">mixed graph</td><td align="center">混合图</td></tr><tr><td align="center">adjacent</td><td align="center">邻接</td><td align="center">incident</td><td align="center">关联</td><td align="center">degree</td><td align="center">度</td></tr><tr><td align="center">in-degree deg-</td><td align="center">入度</td><td align="center">out-degree deg+</td><td align="center">出度</td><td align="center">complete graph $K_N$</td><td align="center">完全图</td></tr><tr><td align="center">Bipartite graph</td><td align="center">二分图</td><td align="center">complete bipartite graph</td><td align="center">完全二分图</td><td align="center">Subgraph</td><td align="center">子图</td></tr><tr><td align="center">union of two graphs</td><td align="center">两图的并</td><td align="center">adjacency matrix</td><td align="center">邻接矩阵</td><td align="center">incidence matrix</td><td align="center">关联矩阵</td></tr><tr><td align="center">graph isomorphism</td><td align="center">图的同构</td><td align="center">graph invariant</td><td align="center">图的同构不变量</td><td align="center">simple path</td><td align="center">简单路径</td></tr><tr><td align="center">simple circuit</td><td align="center">简单环</td><td align="center">connected graph</td><td align="center">连通图</td><td align="center">connected component</td><td align="center">连通分量</td></tr><tr><td align="center">vertex connectivity</td><td align="center">顶点联通性</td><td align="center">edge connectivity</td><td align="center">边联通性</td><td align="center">strongly&#x2F;weakly connected directed graph</td><td align="center">强&#x2F;弱连通有向图</td></tr><tr><td align="center">strongly&#x2F;weakly connected component of a directed graph</td><td align="center">有向图的强&#x2F;弱连通分量</td><td align="center">polish notation</td><td align="center">波兰式</td><td align="center">reverse polish notation</td><td align="center">逆波兰式</td></tr><tr><td align="center">tree</td><td align="center">树</td><td align="center">forest</td><td align="center">森林</td><td align="center">rooted tree</td><td align="center">根树</td></tr><tr><td align="center">subtree</td><td align="center">子树</td><td align="center">parent of $v$</td><td align="center">$v$的双亲</td><td align="center">child of $v$</td><td align="center">$v$的孩子</td></tr><tr><td align="center">sibling of $v$</td><td align="center">$v$的兄弟姐妹</td><td align="center">ancestor of $v$</td><td align="center">$v$的祖先</td><td align="center">descendant of $v$</td><td align="center">$v$的后代</td></tr><tr><td align="center">internal vertex</td><td align="center">内顶点</td><td align="center">leaf</td><td align="center">叶子节点</td><td align="center">level of a vertex</td><td align="center">节点的层次</td></tr><tr><td align="center">height of a tree</td><td align="center">树的高度</td><td align="center">m-ary tree</td><td align="center">m叉树</td><td align="center">full m-ary tree</td><td align="center">完全m叉树</td></tr><tr><td align="center">binary tree</td><td align="center">二叉树</td><td align="center">ordered tree</td><td align="center">排序树</td><td align="center">balanced tree</td><td align="center">平衡树</td></tr><tr><td align="center">binary search tree</td><td align="center">二叉搜索树</td><td align="center">decision tree</td><td align="center">决策树</td><td align="center">tree traversal</td><td align="center">树的遍历</td></tr><tr><td align="center">preorder traversal</td><td align="center">前序遍历</td><td align="center">inorder traversal</td><td align="center">中序遍历</td><td align="center">postorder traversal</td><td align="center">后序遍历</td></tr><tr><td align="center">infix notation</td><td align="center">中序表达式</td><td align="center">prefix notation</td><td align="center">前序表达式</td><td align="center">postfix notation</td><td align="center">后序表达式</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">BUAA SEM MSE IMIS 专业必修课之一，为了巩固学习和更好的复习，整理一下</summary>
    
    
    
    <category term="学习" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>离散数学整理（三）- 图与树</title>
    <link href="https://hobeedzc.github.io/2020/05/21/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89-%20%E5%9B%BE%E4%B8%8E%E6%A0%91/"/>
    <id>https://hobeedzc.github.io/2020/05/21/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%89%EF%BC%89-%20%E5%9B%BE%E4%B8%8E%E6%A0%91/</id>
    <published>2020-05-21T03:57:58.000Z</published>
    <updated>2020-06-08T01:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在本站发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或邮件联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>众所周之，hobee在数学的学习方面就宛如一只菜鸡，只好通过不断复习和整理的途径来巩固自己辣鸡的数学成绩。主要是我真的什么也不会了啊（哭哭脸…那就从这里开始吧！</p><p>因为考核是候题目是英文的，所以我的整理也就用英文来叭（我也不想啊…</p><h2 id="中英术语对照表"><a href="#中英术语对照表" class="headerlink" title="中英术语对照表"></a>中英术语对照表</h2><p>为了防止之后我自己都看不明白，在梳理知识点之前我先写一份中英术语对照表好了。</p><h3 id="Key-Terms"><a href="#Key-Terms" class="headerlink" title="Key Terms"></a>Key Terms</h3><table><thead><tr><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th></tr></thead><tbody><tr><td align="center">Graph</td><td align="center">图</td><td align="center">vertex&#x2F;node</td><td align="center">顶点</td><td align="center">edge</td><td align="center">边</td></tr><tr><td align="center">Directed graph</td><td align="center">有向图</td><td align="center">directed edge&#x2F;arc</td><td align="center">有向边</td><td align="center">multiple edges</td><td align="center">多重边</td></tr><tr><td align="center">loop</td><td align="center">环</td><td align="center">simple graph</td><td align="center">简单图</td><td align="center">multigraph</td><td align="center">多重图</td></tr><tr><td align="center">pseudograph</td><td align="center">伪图</td><td align="center">directed multigraph</td><td align="center">多重有向图</td><td align="center">mixed graph</td><td align="center">混合图</td></tr><tr><td align="center">adjacent</td><td align="center">邻接</td><td align="center">incident</td><td align="center">关联</td><td align="center">degree</td><td align="center">度</td></tr><tr><td align="center">in-degree deg-</td><td align="center">入度</td><td align="center">out-degree deg+</td><td align="center">出度</td><td align="center">complete graph $K_N$</td><td align="center">完全图</td></tr><tr><td align="center">Bipartite graph</td><td align="center">二分图</td><td align="center">complete bipartite graph</td><td align="center">完全二分图</td><td align="center">Subgraph</td><td align="center">子图</td></tr><tr><td align="center">union of two graphs</td><td align="center">两图的并</td><td align="center">adjacency matrix</td><td align="center">邻接矩阵</td><td align="center">incidence matrix</td><td align="center">关联矩阵</td></tr><tr><td align="center">graph isomorphism</td><td align="center">图的同构</td><td align="center">graph invariant</td><td align="center">图的同构不变量</td><td align="center">simple path</td><td align="center">简单路径</td></tr><tr><td align="center">simple circuit</td><td align="center">简单环</td><td align="center">connected graph</td><td align="center">连通图</td><td align="center">connected component</td><td align="center">连通分量</td></tr><tr><td align="center">vertex connectivity</td><td align="center">顶点联通性</td><td align="center">edge connectivity</td><td align="center">边联通性</td><td align="center">strongly&#x2F;weakly connected directed graph</td><td align="center">强&#x2F;弱连通有向图</td></tr><tr><td align="center">strongly&#x2F;weakly connected component of a directed graph</td><td align="center">有向图的强&#x2F;弱连通分量</td><td align="center">polish notation</td><td align="center">波兰式</td><td align="center">reverse polish notation</td><td align="center">逆波兰式</td></tr><tr><td align="center">tree</td><td align="center">树</td><td align="center">forest</td><td align="center">森林</td><td align="center">rooted tree</td><td align="center">根树</td></tr><tr><td align="center">subtree</td><td align="center">子树</td><td align="center">parent of $v$</td><td align="center">$v$的双亲</td><td align="center">child of $v$</td><td align="center">$v$的孩子</td></tr><tr><td align="center">sibling of $v$</td><td align="center">$v$的兄弟姐妹</td><td align="center">ancestor of $v$</td><td align="center">$v$的祖先</td><td align="center">descendant of $v$</td><td align="center">$v$的后代</td></tr><tr><td align="center">internal vertex</td><td align="center">内顶点</td><td align="center">leaf</td><td align="center">叶子节点</td><td align="center">level of a vertex</td><td align="center">节点的层次</td></tr><tr><td align="center">height of a tree</td><td align="center">树的高度</td><td align="center">m-ary tree</td><td align="center">m叉树</td><td align="center">full m-ary tree</td><td align="center">完全m叉树</td></tr><tr><td align="center">binary tree</td><td align="center">二叉树</td><td align="center">ordered tree</td><td align="center">排序树</td><td align="center">balanced tree</td><td align="center">平衡树</td></tr><tr><td align="center">binary search tree</td><td align="center">二叉搜索树</td><td align="center">decision tree</td><td align="center">决策树</td><td align="center">tree traversal</td><td align="center">树的遍历</td></tr><tr><td align="center">preorder traversal</td><td align="center">前序遍历</td><td align="center">inorder traversal</td><td align="center">中序遍历</td><td align="center">postorder traversal</td><td align="center">后序遍历</td></tr><tr><td align="center">infix notation</td><td align="center">中序表达式</td><td align="center">prefix notation</td><td align="center">前序表达式</td><td align="center">postfix notation</td><td align="center">后序表达式</td></tr></tbody></table><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><h2 id="Graphs-and-Trees"><a href="#Graphs-and-Trees" class="headerlink" title="Graphs and Trees"></a>Graphs and Trees</h2><h3 id="Graphs"><a href="#Graphs" class="headerlink" title="Graphs"></a>Graphs</h3><h4 id="Graphs-and-Graph-Models"><a href="#Graphs-and-Graph-Models" class="headerlink" title="Graphs and Graph Models"></a>Graphs and Graph Models</h4><h4 id="Graph-Terminology-and-Special-Types-of-Graphs"><a href="#Graph-Terminology-and-Special-Types-of-Graphs" class="headerlink" title="Graph Terminology and Special Types of Graphs"></a>Graph Terminology and Special Types of Graphs</h4><h4 id="Representing-Graphs-and-Graph-Isomorphism"><a href="#Representing-Graphs-and-Graph-Isomorphism" class="headerlink" title="Representing Graphs and Graph Isomorphism"></a>Representing Graphs and Graph Isomorphism</h4><h5 id="Adjacency-Matrices"><a href="#Adjacency-Matrices" class="headerlink" title="Adjacency Matrices"></a>Adjacency Matrices</h5><h5 id="Incidence-Matrices"><a href="#Incidence-Matrices" class="headerlink" title="Incidence Matrices"></a>Incidence Matrices</h5><h5 id="Adjacency-Lists"><a href="#Adjacency-Lists" class="headerlink" title="Adjacency Lists"></a>Adjacency Lists</h5><h5 id="Isomorphism-of-Graphs"><a href="#Isomorphism-of-Graphs" class="headerlink" title="Isomorphism of Graphs"></a>Isomorphism of Graphs</h5><h4 id="Connectivity"><a href="#Connectivity" class="headerlink" title="Connectivity"></a>Connectivity</h4><h3 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h3><h4 id="Introduction-to-Trees"><a href="#Introduction-to-Trees" class="headerlink" title="Introduction to Trees"></a>Introduction to Trees</h4><p>A tree is a connected undirected graph with no simple circuits.</p><p>A forest is a graph that has no simple circuit, but is not connected.</p><p>Each of the connected components in a forest is a tree.</p><p><strong>Theorem:</strong> An undirected graph is a tree iff there is a unique simple path between any two of its vertices.</p><h5 id="Rooted-Trees"><a href="#Rooted-Trees" class="headerlink" title="Rooted Trees"></a>Rooted Trees</h5><p>A rooted tree is a tree in which one vertex has been designated as the root and every edge is directed away from the root.</p><p>An unrooted tree is converted into different rooted trees when different vertices are chosen as the root.</p><h6 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h6><p>parent, child, siblings</p><p>ancestors, descendants</p><p>leaf, internal vertices</p><p>subtree</p><h6 id="M-ary-rooted-trees"><a href="#M-ary-rooted-trees" class="headerlink" title="M-ary rooted trees"></a>M-ary rooted trees</h6><p>A rooted tree is called an m-ary tree if every internal vertex has no more than m children.</p><p>The tree is called a full m-ary tree if every internal vertex has exactly m children.</p><p>An m-ary tree with m &#x3D; 2 is called a binary tree</p><h6 id="Ordered-rooted-trees"><a href="#Ordered-rooted-trees" class="headerlink" title="Ordered rooted trees"></a>Ordered rooted trees</h6><p>An ordered rooted tree is a rooted tree where the children of each internal vertex are ordered.</p><p>A binary tree is an ordered rooted where each internal vertex has at most two children, the first is called the left child and the second is called the right child.</p><h5 id="Properties-of-trees"><a href="#Properties-of-trees" class="headerlink" title="Properties of trees"></a>Properties of trees</h5><ul><li>A tree with n vertices has n-1 edges.</li><li>A full m-ary tree with $i$ internal vertices has $n &#x3D; mi + 1$ vertices.</li><li>There all at most $m^h$ leaves in an m-ary tree of height $h$ </li><li>if an m-ary tree of height $h$ has $l$ leaves , then $h \ge \text{ceil}(\log_ml)$ , if the m-ary tree is full and balanced, then $h &#x3D; \text{ceil}(\log_ml)$ .</li><li>A full m-ary tree with<ul><li>$n$ vertices has $i &#x3D; \frac{n-1}{m}$ internal vertices and $l &#x3D; \frac{(m-1)n+1}{m}$ leaves</li><li>$i$ internal vertices has $n &#x3D; mi + 1$ vertices and $l &#x3D; (m-1)i+1$ leaves.</li><li>$l$ leaves has $n &#x3D; \frac{ml-1}{m-1}$ vertices and $i &#x3D; \frac{l-1}{m-1}$ internal vertices.</li></ul></li></ul><h5 id="Level-of-vertices"><a href="#Level-of-vertices" class="headerlink" title="Level of vertices"></a>Level of vertices</h5><p>The level of a vertex $v$ in a rooted tree is the length of the unique path from the root to this vertex.</p><p>The height of a rooted tree is the maximum of the levels of the vertices.</p><h5 id="Balanced-M-ary-Trees"><a href="#Balanced-M-ary-Trees" class="headerlink" title="Balanced M-ary Trees"></a>Balanced M-ary Trees</h5><p>A rooted m-ary tree of height $h$ is balabced if all leaves are at levels $h$ or $h-1$ .</p><h4 id="Applications-of-Trees"><a href="#Applications-of-Trees" class="headerlink" title="Applications of Trees"></a>Applications of Trees</h4><p>Binary Search Trees</p><p>Decision Trees</p><p>Prefix Codes - Huffman Coding</p><p>Game Tree - Tic-tac-toe</p><h4 id="Tree-Traversal"><a href="#Tree-Traversal" class="headerlink" title="Tree Traversal"></a>Tree Traversal</h4><h5 id="Universal-Address-Systems"><a href="#Universal-Address-Systems" class="headerlink" title="Universal Address Systems"></a>Universal Address Systems</h5><p>Chapters of the book</p><h5 id="Traversal-Algorithms"><a href="#Traversal-Algorithms" class="headerlink" title="Traversal Algorithms"></a>Traversal Algorithms</h5><h6 id="preorder"><a href="#preorder" class="headerlink" title="preorder"></a>preorder</h6><p>root -&gt; left -&gt; right</p><h6 id="inorder"><a href="#inorder" class="headerlink" title="inorder"></a>inorder</h6><p>left -&gt; root -&gt; right</p><h6 id="postorder"><a href="#postorder" class="headerlink" title="postorder"></a>postorder</h6><p>left -&gt; right -&gt; root</p><h5 id="Notation"><a href="#Notation" class="headerlink" title="Notation"></a>Notation</h5><h6 id="prefix-notation"><a href="#prefix-notation" class="headerlink" title="prefix notation"></a>prefix notation</h6><p>preorder</p><h6 id="postfix-notation"><a href="#postfix-notation" class="headerlink" title="postfix notation"></a>postfix notation</h6><p>postorder</p>]]></content>
    
    
    <summary type="html">BUAA SEM MSE IMIS 专业必修课之一，为了巩固学习和更好的复习，整理一下</summary>
    
    
    
    <category term="学习" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>离散数学整理（二）-集合与关系</title>
    <link href="https://hobeedzc.github.io/2020/05/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89-%20%E9%9B%86%E5%90%88%E4%B8%8E%E5%85%B3%E7%B3%BB/"/>
    <id>https://hobeedzc.github.io/2020/05/19/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%EF%BC%88%E4%BA%8C%EF%BC%89-%20%E9%9B%86%E5%90%88%E4%B8%8E%E5%85%B3%E7%B3%BB/</id>
    <published>2020-05-19T02:14:14.000Z</published>
    <updated>2020-06-05T07:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在<a href="https://hobeedzc.github.io/">本站</a>发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>众所周之，hobee在数学的学习方面就宛如一只菜鸡，只好通过不断复习和整理的途径来巩固自己辣鸡的数学成绩。主要是我真的什么也不会了啊（哭哭脸…那就从这里开始吧！</p><p>因为考核是候题目是英文的，所以我的整理也就用英文来叭（我也不想啊…</p><h2 id="中英术语对照表"><a href="#中英术语对照表" class="headerlink" title="中英术语对照表"></a>中英术语对照表</h2><p>为了防止之后我自己都看不明白，在梳理知识点之前我先写一份中英术语对照表好了。</p><table><thead><tr><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th></tr></thead><tbody><tr><td align="center">Set</td><td align="center">集合</td><td align="center">element</td><td align="center">元素</td><td align="center">member of a set</td><td align="center">集合的成员</td></tr><tr><td align="center">Roster method</td><td align="center">枚举</td><td align="center">set builder notation</td><td align="center">集合生成公式</td><td align="center">empty set</td><td align="center">空集</td></tr></tbody></table><pre><code>Universal set    |   全集   |     Venn diagram      |  VN图   |      set equality      |  集合等价     Subset        |   子集   |     proper subset     | 真子集  |       finite set       |   有限集   Infinite set     | 无限集 |      cardinality      | 势 |       power set        | 幂集     Union        | 并集 |     Intersection      | 交集 |       difference       | 差  Complement      | 补集 | Symmetric difference  | 对称差 |    membership table    | 成员表   Function       | 函数 |        domain         | 值域 |        codomain        | 陪域     Image        | 像 |       preimage        | 原像 |         range          | 值域     Onto         | 满射 |      One-to-one       | 单射 |       Surgection       |              Injection      | 单射 |       Bijection       | 双射 |        Inverse         | 否  Composition     | 复合函数 |         floor         | 下取整 |        ceiling         | 上取整   sequence       | 序列 | Geometric progression | 几何级数 | arithmetic progression | 算术级数 </code></pre><p> recurrence relation | 递推关系 |     Countable set     | 可数集 |    Uncountable set     | 不可数集<br>     alpha null      | 阿里夫零 | Binary relation from A to B | 二元关系 | relation on A | 集合A上的关系<br> Reflexive | 自反性 | symmetric | 对称性 | antisymmetric | 反对称性<br> transitive | 传递性 | n-ary relation | n元关系 | relational data model | 关系数据模型<br> primary key | 主键 | composite key | 复合主键 | selection operator | 选择运算符<br> projection | 投影 | join | 并 | digraph |<br> loop | 环 | closure of a relation R with respect to property | 关系R的闭包 | connective relation |<br> Path | 路径 | circuit | 圈 | $R^\star$ |<br> equivalence relation | 等价关系 | equivalent class | 等价类 | partition | 划分<br> Partial ordering | 偏序 | poset | 偏序集合 | comparable | 可比<br> total ordering | 全序 | well-ordered set | 良序集 | hasse diagram | 哈斯图<br> maximal element | 最大元素 | minimal element | 最小元素 | greatest element | 极大元素<br> least element | 极小元素 | upper bound | 上界 | lower bound | 下界 </p><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><h2 id="Sets-and-Relations"><a href="#Sets-and-Relations" class="headerlink" title="Sets and Relations"></a>Sets and Relations</h2><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><p>A set is an unordered collection of objects.</p><p>The objects in a set are called the elements, or members of the set. $a\in A$ and $a\notin A$</p><p>A set is said to contain its elements.</p><h4 id="Describing-Sets"><a href="#Describing-Sets" class="headerlink" title="Describing Sets"></a>Describing Sets</h4><h5 id="Roster-Method"><a href="#Roster-Method" class="headerlink" title="Roster Method"></a>Roster Method</h5><p>Example: $V &#x3D; {a,e,i,o,u }$</p><h5 id="Set-Builder-Notation"><a href="#Set-Builder-Notation" class="headerlink" title="Set Builder Notation"></a>Set Builder Notation</h5><p>Example: $O &#x3D; { x\in Z^+|x \text{ is odd and } x&lt;10 }$ </p><p>closed interval $[a,b]$</p><p>open interval $(a,b)$</p><h4 id="Some-Important-Sets"><a href="#Some-Important-Sets" class="headerlink" title="Some Important Sets"></a>Some Important Sets</h4><p>$N &#x3D; \text{natural numbers} &#x3D; {0,1,2,3\dots}$</p><p>$Z &#x3D; \text{integers} &#x3D; {\dots,-3,-2,-1,0,1,2,3\dots}$</p><p>$Z^+ &#x3D; \text{positive integers} &#x3D; {1,2,3\dots}$</p><p>$R$ &#x3D; set of real numbers</p><p>$R^+$ &#x3D; set of positive real numbers</p><p>$C$ &#x3D; set of complex numbers</p><p>$Q$ &#x3D; set of rational numbers</p><h4 id="Empty-Set-and-Universal-Set"><a href="#Empty-Set-and-Universal-Set" class="headerlink" title="Empty Set and Universal Set"></a>Empty Set and Universal Set</h4><h5 id="Universal-Set"><a href="#Universal-Set" class="headerlink" title="Universal Set"></a>Universal Set</h5><p>The Universal set $U$ is the set containing everything currently under consideration.</p><h5 id="Empty-Set"><a href="#Empty-Set" class="headerlink" title="Empty Set"></a>Empty Set</h5><p>The empty set is the set with no elements. Symbolized $\emptyset$ or ${}$</p><p>Notice : $\emptyset \neq {\emptyset }$</p><h5 id="Russell’s-Paradox"><a href="#Russell’s-Paradox" class="headerlink" title="Russell’s Paradox"></a>Russell’s Paradox</h5><p>not so important</p><h4 id="Subsets-and-Set-Equality"><a href="#Subsets-and-Set-Equality" class="headerlink" title="Subsets and Set Equality"></a>Subsets and Set Equality</h4><h5 id="Set-Equality"><a href="#Set-Equality" class="headerlink" title="Set Equality"></a>Set Equality</h5><p>Two sets are equal iff they have the same elements.</p><p>$A&#x3D;B$ iff $\forall x(x\in A \leftrightarrow x\in B)$ is true</p><p>$A &#x3D; B$ means $A\subseteq B$ and $B\subseteq A$ </p><h5 id="Subsets"><a href="#Subsets" class="headerlink" title="Subsets"></a>Subsets</h5><p>The set $A$ is a subset of $B$ , iff every element of $A$ is also an element of $B$ .</p><p>$A\subseteq B$ iff $\forall x(x\in A \rightarrow x\in B)$ is true</p><h5 id="Proper-Subsets"><a href="#Proper-Subsets" class="headerlink" title="Proper Subsets"></a>Proper Subsets</h5><p>If $A\subseteq B$ , but $A\neq B$ , then we say $A$ is a proper subset of $B$ .</p><p>$A\subset B$ iff $\forall x(x\in A \rightarrow x\in B) \ \wedge \exist x(x\in B\ \wedge x\notin A)$ is true</p><h4 id="Cardinality-of-Sets"><a href="#Cardinality-of-Sets" class="headerlink" title="Cardinality of Sets"></a>Cardinality of Sets</h4><p>If there are exactly n distinct elements in $S$ where $n$ is a nonnegative integer , We say $S$ is finite, otherwise it is infinite.</p><p>The cardinality of a finite set $A$ ,denoted by $|A|$ , is  the number of elements of $A$. </p><h4 id="Power-Sets"><a href="#Power-Sets" class="headerlink" title="Power Sets"></a>Power Sets</h4><p>The set of all subsets of a set $A$ , denoted $P(A)$ , is called the power set of $A$.</p><p>if a set has $n$ elements , then the cardinality of the power set is $2^n$ .</p><h4 id="Tuples"><a href="#Tuples" class="headerlink" title="Tuples"></a>Tuples</h4><p>Two n-tuples are equal iff their corresponding elements are equal.</p><p>2-tuples are called ordered pairs.</p><h4 id="Cartesian-Product"><a href="#Cartesian-Product" class="headerlink" title="Cartesian Product"></a>Cartesian Product</h4><p>The Cartesian Product of two sets $A$ and $B$ ,denoted by $A\times B$ is the set of ordered pairs $(a,b)$ where $a\in A$ and $b \in B$.<br>$$<br>A\times B &#x3D; {(a,b)|a\in A\wedge b\in B}<br>$$<br>A subset $R$ of the Cartesian product $A\times B$ is called a relation from the set $A$ to the set $B$.</p><h4 id="Truth-sets-of-Quantifiers"><a href="#Truth-sets-of-Quantifiers" class="headerlink" title="Truth sets of Quantifiers"></a>Truth sets of Quantifiers</h4><p>Predicate $P$ and domain $D$ , the truth set of $P$ to be the set of elements in $D$ for which $P(X)$ is true. ${ x\in D|P(x)}$</p><h4 id="Set-Operations"><a href="#Set-Operations" class="headerlink" title="Set Operations"></a>Set Operations</h4><h5 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h5><p>$$<br>A \cup B &#x3D; {x|x\in A \vee x \in B}<br>$$</p><h5 id="Intersection"><a href="#Intersection" class="headerlink" title="Intersection"></a>Intersection</h5><p>$$<br>A \cap B &#x3D; {x|x\in A \wedge x \in B}<br>$$</p><p>If the intersection is empty , then $A$ and $B$ are said to be disjoint</p><h5 id="Complementation"><a href="#Complementation" class="headerlink" title="Complementation"></a>Complementation</h5><p>$$<br>\overline{A}  &#x3D; { x\in U|x\notin A }<br>$$</p><h5 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h5><p>$$<br>A-B &#x3D; {x|x\in A\wedge x\notin B } &#x3D; A\cap \overline{B}<br>$$</p><h5 id="Symmetric-Difference"><a href="#Symmetric-Difference" class="headerlink" title="Symmetric Difference"></a>Symmetric Difference</h5><p>$$<br>A \oplus B &#x3D; (A-B)\cup (B-A)<br>$$</p><h5 id="Generalized-unions-and-intersections"><a href="#Generalized-unions-and-intersections" class="headerlink" title="Generalized unions and intersections"></a>Generalized unions and intersections</h5><p>$$<br>\bigcup^n_{i &#x3D; 1} A_i &#x3D; A_1 \cup A_2\cup \dots\cup A_n \<br>\bigcap^n_{i &#x3D; 1} A_i &#x3D; A_1 \cap A_2\cap \dots\cap A_n \<br>$$</p><p>These are well defined , since union and intersection are associative.</p><h4 id="Set-Identities"><a href="#Set-Identities" class="headerlink" title="Set Identities"></a>Set Identities</h4><h5 id="Identity-laws"><a href="#Identity-laws" class="headerlink" title="Identity laws"></a>Identity laws</h5><p>$$<br>A\cup\emptyset &#x3D; A\<br>A\cap U  &#x3D; A<br>$$</p><h5 id="Domination-laws"><a href="#Domination-laws" class="headerlink" title="Domination laws"></a>Domination laws</h5><p>$$<br>A\cap\emptyset &#x3D; \emptyset\<br>A\cup U  &#x3D; U<br>$$</p><h5 id="Idempotent-laws"><a href="#Idempotent-laws" class="headerlink" title="Idempotent laws"></a>Idempotent laws</h5><p>$$<br>A\cup A &#x3D; A\<br>A\cap A &#x3D; A<br>$$</p><h5 id="Complementation-law"><a href="#Complementation-law" class="headerlink" title="Complementation law"></a>Complementation law</h5><p>$$<br>\overline{(\overline{A})}  &#x3D; A<br>$$</p><h5 id="Commutative-laws"><a href="#Commutative-laws" class="headerlink" title="Commutative laws"></a>Commutative laws</h5><p>$$<br>A\cap B &#x3D; B\cap A\<br>A\cup B &#x3D; B\cup A<br>$$</p><h5 id="Associative-laws"><a href="#Associative-laws" class="headerlink" title="Associative laws"></a>Associative laws</h5><p>$$<br>A\cap (B\cap C) &#x3D; (A\cap B)\cap C\<br>A\cup (B\cup C) &#x3D; (A\cup B)\cup C<br>$$</p><h5 id="Distributive-laws"><a href="#Distributive-laws" class="headerlink" title="Distributive laws"></a>Distributive laws</h5><p>$$<br>A\cap (B\cup C) &#x3D; (A\cap B)\cup (A\cap C)\<br>A\cup (B\cap C) &#x3D; (A\cup B)\cap (A\cup C)<br>$$</p><h5 id="De-Morgan’s-laws"><a href="#De-Morgan’s-laws" class="headerlink" title="De Morgan’s laws"></a>De Morgan’s laws</h5><p>$$<br>\overline{A\cup B} &#x3D; \overline{A} \cap \overline{B}\<br>\overline{A\cap B} &#x3D; \overline{A} \cup \overline{B}<br>$$</p><h5 id="Absorption-laws"><a href="#Absorption-laws" class="headerlink" title="Absorption laws"></a>Absorption laws</h5><p>$$<br>A \cup (A\cap B) &#x3D; A\<br>A \cap (A\cup B) &#x3D; A<br>$$</p><h5 id="Complement-laws"><a href="#Complement-laws" class="headerlink" title="Complement laws"></a>Complement laws</h5><p>$$<br>A\cup \overline{A} &#x3D; U\<br>A\cap \overline{A} &#x3D; \emptyset<br>$$</p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><h4 id="Definition-of-a-Function"><a href="#Definition-of-a-Function" class="headerlink" title="Definition of a Function"></a>Definition of a Function</h4><h4 id="Injection-Surjection-and-Bijection"><a href="#Injection-Surjection-and-Bijection" class="headerlink" title="Injection,Surjection and Bijection"></a>Injection,Surjection and Bijection</h4><h5 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h5><p>A function is said to be an injection if it is one-to-one or injective.<br>$$<br>\forall a,b[f(a) &#x3D; f(b)\rightarrow a &#x3D;b]<br>$$</p><h5 id="Surjection"><a href="#Surjection" class="headerlink" title="Surjection"></a>Surjection</h5><p>A function is called a surjection if it is onto or surjective.<br>$$<br>\forall b \exist a [f(a) &#x3D; b]<br>$$</p><h5 id="Bijection"><a href="#Bijection" class="headerlink" title="Bijection"></a>Bijection</h5><p>A function is a one-to-one correspondence, or a bijection, if it is both one-to-one and onto.<br>$$<br>\forall a,b[f(a) &#x3D; f(b)\rightarrow a &#x3D;b] \wedge \forall b \exist a [f(a) &#x3D; b]<br>$$</p><h4 id="Inverse-Function"><a href="#Inverse-Function" class="headerlink" title="Inverse Function"></a>Inverse Function</h4><h4 id="Function-Composition"><a href="#Function-Composition" class="headerlink" title="Function Composition"></a>Function Composition</h4><h4 id="Partial-Functions"><a href="#Partial-Functions" class="headerlink" title="Partial Functions"></a>Partial Functions</h4><h3 id="Relations"><a href="#Relations" class="headerlink" title="Relations"></a>Relations</h3><h4 id="Relations-and-Properties"><a href="#Relations-and-Properties" class="headerlink" title="Relations and Properties"></a>Relations and Properties</h4><p>A binary relation R from a set A to a set B is a subset $R\subseteq A\times B$</p><p>$a R b$ denotes that $(a,b) \in R$ , $a$ is related to $b$ by $R$.</p><p>A binary relation R from a set A is a subset of $A\times A$ .</p><h5 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h5><h6 id="Reflexive"><a href="#Reflexive" class="headerlink" title="Reflexive"></a>Reflexive</h6><p>$R$ is reflexive iff $(a,a)\in R$ for every element $a\in A$<br>$$<br>\forall x[x\in A\rightarrow(x,x)\in R]<br>$$<br>The empty relation on an empty set is reflexive vacuously.</p><h6 id="Irreflexive"><a href="#Irreflexive" class="headerlink" title="Irreflexive"></a>Irreflexive</h6><p>$R$ is irreflexive iff $(a,a)\notin R$ for every element $a\in A$<br>$$<br>\forall x[x\in A\rightarrow(x,x)\notin R]<br>$$</p><h6 id="Symmetric"><a href="#Symmetric" class="headerlink" title="Symmetric"></a>Symmetric</h6><h6 id="Antisymmetric"><a href="#Antisymmetric" class="headerlink" title="Antisymmetric"></a>Antisymmetric</h6><h6 id="Transitive"><a href="#Transitive" class="headerlink" title="Transitive"></a>Transitive</h6><h5 id="Combining-Relations"><a href="#Combining-Relations" class="headerlink" title="Combining Relations"></a>Combining Relations</h5><p>We can combine two relations using basic set operations to form new relations.</p><h5 id="Composition"><a href="#Composition" class="headerlink" title="Composition"></a>Composition</h5><p>Suppose</p><p>$R_1$ is a relation from a set $A$ to set $B$ .</p><p>$R_2$ is a relation from a set $B$ to set $C$ .</p><p>Then the composition of $R_2$ with $R_1$ , is a relation from $A$ to $C$ , denoted by $R_2 \circ R_1$.</p><h5 id="Powers-of-a-relation"><a href="#Powers-of-a-relation" class="headerlink" title="Powers of a relation"></a>Powers of a relation</h5><p>Let $R$ be a binary relation on $A$ . Then the powers $R^n$ of the relation $R$ can be defined inductively by:</p><p>$R^1 &#x3D; R$ , $R^{n+1} &#x3D; R^n \circ R$.</p><h4 id="n-ary-Relations-and-Applications"><a href="#n-ary-Relations-and-Applications" class="headerlink" title="n-ary Relations and Applications"></a>n-ary Relations and Applications</h4><h4 id="Representing-Relations"><a href="#Representing-Relations" class="headerlink" title="Representing Relations"></a>Representing Relations</h4><h4 id="Closures-of-Relations"><a href="#Closures-of-Relations" class="headerlink" title="Closures of Relations"></a>Closures of Relations</h4><h4 id="Equivalence-Relations"><a href="#Equivalence-Relations" class="headerlink" title="Equivalence Relations"></a>Equivalence Relations</h4><h4 id="Partial-Orderings"><a href="#Partial-Orderings" class="headerlink" title="Partial Orderings"></a>Partial Orderings</h4>]]></content>
    
    
    <summary type="html">BUAA SEM MSE IMIS 专业必修课之一，为了巩固学习和更好的复习，整理一下</summary>
    
    
    
    <category term="学习" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>公司财务整理（四）- 投资决策与现金流估算</title>
    <link href="https://hobeedzc.github.io/2020/05/12/%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%95%B4%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89-%20%E6%8A%95%E8%B5%84%E5%86%B3%E7%AD%96%E4%B8%8E%E7%8E%B0%E9%87%91%E6%B5%81%E4%BC%B0%E7%AE%97/"/>
    <id>https://hobeedzc.github.io/2020/05/12/%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1%E6%95%B4%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89-%20%E6%8A%95%E8%B5%84%E5%86%B3%E7%AD%96%E4%B8%8E%E7%8E%B0%E9%87%91%E6%B5%81%E4%BC%B0%E7%AE%97/</id>
    <published>2020-05-12T03:57:58.000Z</published>
    <updated>2020-06-08T01:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在<a href="https://hobeedzc.github.io/">本站</a>发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p><p>这个系列文章流产了，因为我已经考完了！！！</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>《公司财务》是BUAA经济管理学院的一门必修课，每个经管学院的学生都要学习，更加硬核的是这门课采用全英文的形式教学和考核，我觉得有必要整理一下，方便以后复习和学弟学妹的学习。</p><p>与离散数学一样，为了防止以后忘记，先写一个中英文对照表…</p><h2 id="中英文对照表"><a href="#中英文对照表" class="headerlink" title="中英文对照表"></a>中英文对照表</h2><h2 id="Discounted-Cash-Flow-Valuation"><a href="#Discounted-Cash-Flow-Valuation" class="headerlink" title="Discounted Cash Flow Valuation"></a>Discounted Cash Flow Valuation</h2><h3 id="Valuation-The-One-Period-Case"><a href="#Valuation-The-One-Period-Case" class="headerlink" title="Valuation: The One-Period Case"></a>Valuation: The One-Period Case</h3><p>Time allows you the opportunity to postpone consumption and earn interest</p><h4 id="Future-Value"><a href="#Future-Value" class="headerlink" title="Future Value"></a>Future Value</h4><p>The total amount due at the end of the investment is called the Future Value (FV).</p><p>$$<br>FV &#x3D; C_0 \times (1+r)<br>$$</p><p>Where $C_0$ is cash flow today (time zero), and $r$ is the appropriate interest rate.</p><h4 id="Present-Value"><a href="#Present-Value" class="headerlink" title="Present Value"></a>Present Value</h4><p>The amount that a borrower would need to set aside today to be able to meet the promised payment in one year is called the Present Value (PV).</p><p>$$<br>PV &#x3D; \frac{C_1}{1+r}<br>$$</p><p>Where $C_1$ is cash flow at Period 1, and $r$ is the appropriate interest rate.</p><h3 id="The-Multiperiod-Case"><a href="#The-Multiperiod-Case" class="headerlink" title="The Multiperiod Case"></a>The Multiperiod Case</h3><h4 id="Future-Value-1"><a href="#Future-Value-1" class="headerlink" title="Future Value"></a>Future Value</h4><p>The general formula for the future value of an investment over many periods can be written as :<br>$$<br>FV &#x3D; C_0 \times (1+r)^T<br>$$<br>Where C_0 is cash flow at date 0, r is the appropriate interest rate, and T is the number of periods over which the cash is invested.</p><h4 id="Present-Value-1"><a href="#Present-Value-1" class="headerlink" title="Present Value"></a>Present Value</h4><p>$$<br>PV &#x3D; \frac{C_T}{(1+r)^T}<br>$$</p><h4 id="Number-of-Periods"><a href="#Number-of-Periods" class="headerlink" title="Number of Periods"></a>Number of Periods</h4><p>$$<br>T &#x3D; \frac{ln(\frac{FV}{PV})}{ln(1+r)}<br>$$</p><h5 id="Double-your-money"><a href="#Double-your-money" class="headerlink" title="Double your money"></a>Double your money</h5><p>the “Rule-of-72” : </p><p>Years to Double &#x3D; $\frac{72}{i}$</p><h4 id="Rate"><a href="#Rate" class="headerlink" title="Rate"></a>Rate</h4><p>$$<br>r &#x3D; \sqrt[n]\frac{FV}{PV} -1<br>$$</p><h3 id="Compounding-Periods"><a href="#Compounding-Periods" class="headerlink" title="Compounding Periods"></a>Compounding Periods</h3><p>Compounding an investment $m$ times a year for $T$ years provides for value of wealth:<br>$$<br>FV &#x3D; C_0\times (1+\frac r m)^{m\times T}<br>$$</p><h4 id="Effective-Annual-Rate-EAR"><a href="#Effective-Annual-Rate-EAR" class="headerlink" title="Effective Annual Rate (EAR)"></a>Effective Annual Rate (EAR)</h4><p>The EAR of interest is the annual rate that would give us the same end-of-investment after $T$ years.<br>$$<br>EAR &#x3D; (1+\frac rm)^m-1<br>$$<br>The actual rate of interest earned after adjusting the nominal rate for factors such as the number of compounding periods per year.</p><h4 id="Continuous-Compounding"><a href="#Continuous-Compounding" class="headerlink" title="Continuous Compounding"></a>Continuous Compounding</h4><p>The general formula for the future value of an investment compounded continuously over many periods can be written as:<br>$$<br>FV &#x3D; C_0 \times e^{rT}<br>$$<br>Where $C_0$ is cash flow at date 0, $r$ is the stated annual interest rate, $T$ is the number of years, and $e$ is a transcendental number approximately equal to 2.718.</p><h3 id="Simplifications"><a href="#Simplifications" class="headerlink" title="Simplifications"></a>Simplifications</h3><h4 id="Perpetuity"><a href="#Perpetuity" class="headerlink" title="Perpetuity"></a>Perpetuity</h4><p>A constant stream of cash flows that lasts forever.<br>$$<br>PV &#x3D; \frac C r<br>$$<br>Where $C$ is constant cash flow, and $r$ is the stated annual interest rate.</p><h4 id="Growing-Perpetuity"><a href="#Growing-Perpetuity" class="headerlink" title="Growing Perpetuity"></a>Growing Perpetuity</h4><p>A growing stream of cash flows that lasts forever.<br>$$<br>PV &#x3D; \frac{C_1}{r-g} &#x3D; \frac{C_0(1+g)}{r-g}<br>$$<br>Where $C_i$ is cash flow at date $i$, $r$ is the stated annual interest rate, and $g$ is the growth rate.</p><p>We also called this Gordon formula.</p><h4 id="Annuity"><a href="#Annuity" class="headerlink" title="Annuity"></a>Annuity</h4><p>A constant stream of cash flows with a fixed maturity.<br>$$<br>PV &#x3D; \frac C r [1-\frac{1}{(1+r)^T}]\<br>FV &#x3D; \frac C r [(1+r)^T-1]<br>$$<br>Where $C$ is constant cash flow, $r$ is the stated annual interest rate, and $T$ is the number of years.</p><p>Care about deferred annuity.</p><h4 id="Growing-Annuity"><a href="#Growing-Annuity" class="headerlink" title="Growing Annuity"></a>Growing Annuity</h4><p>A growing stream of cash flows with a fixed maturity.<br>$$<br>PV &#x3D; \frac{C_1}{r-g}[1-(\frac{1+g}{1-r})^T]<br>$$<br>Where $C_i$ is cash flow at date $i$, $r$ is the stated annual interest rate, $g$ is the growth rate, and $T$ is the number of years.</p><h3 id="Loan-Amortization"><a href="#Loan-Amortization" class="headerlink" title="Loan Amortization"></a>Loan Amortization</h3><h4 id="Pure-Discount-Loans"><a href="#Pure-Discount-Loans" class="headerlink" title="Pure Discount Loans"></a>Pure Discount Loans</h4><p>The simplest form of loan.</p><p>Treasury bills.</p><h4 id="Interest-Only-Loans"><a href="#Interest-Only-Loans" class="headerlink" title="Interest-Only Loans"></a>Interest-Only Loans</h4><p>cash flows : </p><p>Year 1~n-1 : Interest payment</p><p>Year n :  Interest + principle</p><h4 id="Amortized-Loans"><a href="#Amortized-Loans" class="headerlink" title="Amortized Loans"></a>Amortized Loans</h4><h5 id="With-Fixed-Principal-Payment"><a href="#With-Fixed-Principal-Payment" class="headerlink" title="With Fixed Principal Payment"></a>With Fixed Principal Payment</h5><p>Interest + principle</p><p>利息 &#x3D; 尚未归还的本金*利率</p><p>每期支付的本金相同但利息不同</p><h5 id="With-Fixed-Payment"><a href="#With-Fixed-Payment" class="headerlink" title="With Fixed Payment"></a>With Fixed Payment</h5><p>每期支付的金额相同</p><h6 id="Steps"><a href="#Steps" class="headerlink" title="Steps:"></a>Steps:</h6><ol><li>Calculate the payment per period</li><li>Determine the interest in Period t</li><li>Compute principal payment in Period t</li><li>Determine ending balance in Period t</li><li>Start again at Step 2 and repeat.</li></ol>]]></content>
    
    
    <summary type="html">BUAA SEM 院级平台课之一，为了巩固学习和更好的复习，整理一下</summary>
    
    
    
    <category term="学习" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公司财务" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1/"/>
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    
    <category term="公司财务" scheme="https://hobeedzc.github.io/tags/%E5%85%AC%E5%8F%B8%E8%B4%A2%E5%8A%A1/"/>
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>离散数学整理（一）-命题与逻辑</title>
    <link href="https://hobeedzc.github.io/2020/05/11/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%91%BD%E9%A2%98%E4%B8%8E%E9%80%BB%E8%BE%91/"/>
    <id>https://hobeedzc.github.io/2020/05/11/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E6%95%B4%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89-%20%E5%91%BD%E9%A2%98%E4%B8%8E%E9%80%BB%E8%BE%91/</id>
    <published>2020-05-11T02:14:14.000Z</published>
    <updated>2020-07-21T01:18:58.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在本站发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或邮件联系作者。</p>          </div><div class="note info">            <p>本文封面源于网络，侵删。</p><p>系列文章传送门：</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>众所周之，hobee在数学的学习方面就宛如一只菜鸡，只好通过不断复习和整理的途径来巩固自己辣鸡的数学成绩。主要是我真的什么也不会了啊（哭哭脸…那就从这里开始吧！</p><p>因为考核是候题目是英文的，所以我的整理也就用英文来叭（我也不想啊…</p><h2 id="中英术语对照表"><a href="#中英术语对照表" class="headerlink" title="中英术语对照表"></a>中英术语对照表</h2><p>为了防止之后我自己都看不明白，在梳理知识点之前我先写一份中英术语对照表好了。</p><h3 id="Key-Terms"><a href="#Key-Terms" class="headerlink" title="Key Terms"></a>Key Terms</h3><table><thead><tr><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th><th align="center">English</th><th align="center">Chinese</th></tr></thead><tbody><tr><td align="center">Proposition</td><td align="center">命题</td><td align="center">Propositional variable</td><td align="center">命题变量</td><td align="center">Truth value</td><td align="center">真值</td></tr><tr><td align="center">Negation</td><td align="center">否定</td><td align="center">Logical operators</td><td align="center">逻辑运算符</td><td align="center">Compound proposition</td><td align="center">复合命题</td></tr><tr><td align="center">Truth table</td><td align="center">真值表</td><td align="center">Disjunction</td><td align="center">析取</td><td align="center">Conjunction</td><td align="center">合取</td></tr><tr><td align="center">Exclusive or</td><td align="center">异或</td><td align="center">Implication</td><td align="center">蕴含</td><td align="center">Converse</td><td align="center">逆</td></tr><tr><td align="center">Contrapositive</td><td align="center">逆否</td><td align="center">Inverse</td><td align="center">反</td><td align="center">Biconditional</td><td align="center">双蕴含</td></tr><tr><td align="center">Tautology</td><td align="center">永真式</td><td align="center">Contingency</td><td align="center">可能</td><td align="center">Logically equivalent</td><td align="center">逻辑等价</td></tr><tr><td align="center">Predicate</td><td align="center">谓词</td><td align="center">Propositional function</td><td align="center">命题函数</td><td align="center">Domain of discourse</td><td align="center">论域</td></tr><tr><td align="center">Existential quantifier</td><td align="center">存在量词</td><td align="center">Universal quantifier</td><td align="center">全称量词</td><td align="center">Free variable</td><td align="center">自由变元</td></tr><tr><td align="center">Bound variable</td><td align="center">约束变量</td><td align="center">Scope of a quantifier</td><td align="center">量词的作用域</td><td align="center">Argument</td><td align="center">参数</td></tr><tr><td align="center">Argument form</td><td align="center">参数形式</td><td align="center">Premise</td><td align="center">条件</td><td align="center">Conclusion</td><td align="center">结论</td></tr><tr><td align="center">Valid argument form</td><td align="center">合法参数形式</td><td align="center">Rule of inference</td><td align="center">推理规则</td><td align="center">Fallacy</td><td align="center">谬误</td></tr><tr><td align="center">even</td><td align="center">偶数</td><td align="center">odd</td><td align="center">奇数</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="Results"><a href="#Results" class="headerlink" title="Results"></a>Results</h3><h2 id="Proposition-and-Logic"><a href="#Proposition-and-Logic" class="headerlink" title="Proposition and Logic"></a>Proposition and Logic</h2><h3 id="Propositional-Logic"><a href="#Propositional-Logic" class="headerlink" title="Propositional Logic"></a>Propositional Logic</h3><h4 id="Propositions"><a href="#Propositions" class="headerlink" title="Propositions"></a>Propositions</h4><p>A proposition is a declarative sentence that is either true or false.</p><p>The proposition that is always true is denoted by $T$ and the proposition that is always false is denoted by $F$ .</p><p>Propositional Variables: $p,q,r,s\dots$</p><h4 id="Connectives"><a href="#Connectives" class="headerlink" title="Connectives"></a>Connectives</h4><p>Compound Propositions is constructed from logical connectives and other propositions.</p><h5 id="Negation"><a href="#Negation" class="headerlink" title="Negation"></a>Negation</h5><p>The negation of a proposition $p$ is denoted by $\neg p$ and the truth table is as follow:</p><table><thead><tr><th align="center">$p$</th><th align="center">$\neg p$</th></tr></thead><tbody><tr><td align="center">$T$</td><td align="center">$F$</td></tr><tr><td align="center">$F$</td><td align="center">$T$</td></tr></tbody></table><h5 id="Conjunction"><a href="#Conjunction" class="headerlink" title="Conjunction"></a>Conjunction</h5><p>The conjunction of propositions $p$ and $q$ is denoted by $p \wedge q$ and the truth table is as follow:</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \wedge q$</th></tr></thead><tbody><tr><td align="center">$T$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$T$</td><td align="center">$F$</td><td align="center">$F$</td></tr><tr><td align="center">$F$</td><td align="center">$T$</td><td align="center">$F$</td></tr><tr><td align="center">$F$</td><td align="center">$F$</td><td align="center">$F$</td></tr></tbody></table><h5 id="Disjunction"><a href="#Disjunction" class="headerlink" title="Disjunction"></a>Disjunction</h5><h6 id="Inclusive-Or"><a href="#Inclusive-Or" class="headerlink" title="Inclusive Or"></a>Inclusive Or</h6><p>The disjunction of propositions $p$ and $q$ is denoted by $p \vee q$ and the truth table is as follow:</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \vee q$</th></tr></thead><tbody><tr><td align="center">$T$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$T$</td><td align="center">$F$</td><td align="center">$T$</td></tr><tr><td align="center">$F$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$F$</td><td align="center">$F$</td><td align="center">$F$</td></tr></tbody></table><h6 id="Exclusive-Or-Xor"><a href="#Exclusive-Or-Xor" class="headerlink" title="Exclusive Or (Xor)"></a>Exclusive Or (Xor)</h6><p>The exclusive Or of propositions $p$ and $q$ is denoted by $p \oplus q$ and the truth table is as follow:</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \vee q$</th></tr></thead><tbody><tr><td align="center">$T$</td><td align="center">$T$</td><td align="center">$F$</td></tr><tr><td align="center">$T$</td><td align="center">$F$</td><td align="center">$T$</td></tr><tr><td align="center">$F$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$F$</td><td align="center">$F$</td><td align="center">$F$</td></tr></tbody></table><h5 id="Implication"><a href="#Implication" class="headerlink" title="Implication"></a>Implication</h5><p>The implication of propositions $p$ and $q$ is denoted by $p \rightarrow q$ which is read as “if $p$ , then $q$ “and the truth table is as follow:</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \rightarrow q$</th></tr></thead><tbody><tr><td align="center">$T$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$T$</td><td align="center">$F$</td><td align="center">$F$</td></tr><tr><td align="center">$F$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$F$</td><td align="center">$F$</td><td align="center">$T$</td></tr></tbody></table><p><strong>More ways to express $p \rightarrow q$:</strong></p><ul><li>if $p$ , then $q$ or if $p$ , $q$</li><li>$q$ unless $\neg p$</li><li>$q$ if $p$ or $p$ only if $q$</li><li>$p$ implies $q$</li><li>$q$ follows from $p$</li><li>$q$ whenever $p$ or $q$ when $p$</li><li>$q$ is necessary for $p$ or $p$ is sufficient for $q$</li></ul><h6 id="Contrapositive"><a href="#Contrapositive" class="headerlink" title="Contrapositive"></a>Contrapositive</h6><p>$\neg q \rightarrow \neg p$ is the contrapositive of $p \rightarrow q$</p><h6 id="Inverse"><a href="#Inverse" class="headerlink" title="Inverse"></a>Inverse</h6><p>$\neg p \rightarrow\neg q$ is the inverse of $p \rightarrow q$</p><h6 id="converse"><a href="#converse" class="headerlink" title="converse"></a>converse</h6><p>$q \rightarrow p$ is the converse of $p \rightarrow q$</p><h5 id="Biconditional"><a href="#Biconditional" class="headerlink" title="Biconditional"></a>Biconditional</h5><p>The biconditional of propositions $p$ and $q$ is denoted by $p \leftrightarrow q$ which is read as “$p$ if and only if $q$ “and the truth table is as follow:</p><table><thead><tr><th align="center">$p$</th><th align="center">$q$</th><th align="center">$p \leftrightarrow q$</th></tr></thead><tbody><tr><td align="center">$T$</td><td align="center">$T$</td><td align="center">$T$</td></tr><tr><td align="center">$T$</td><td align="center">$F$</td><td align="center">$F$</td></tr><tr><td align="center">$F$</td><td align="center">$T$</td><td align="center">$F$</td></tr><tr><td align="center">$F$</td><td align="center">$F$</td><td align="center">$T$</td></tr></tbody></table><p><strong>More ways to express $p \leftrightarrow q$:</strong></p><ul><li>$p$ is necessary and sufficient for $q$</li><li>if $p$ then $q$ , and conversely</li><li>$p$ iff $q$</li></ul><p>**The precedence of logical connectives: **</p><p>$\neg &gt;\wedge &gt; \vee &gt; \rightarrow &gt; \leftrightarrow$</p><h3 id="Propositional-Equivalences"><a href="#Propositional-Equivalences" class="headerlink" title="Propositional Equivalences"></a>Propositional Equivalences</h3><h4 id="Tautologies-Contradictions-and-Contingencies"><a href="#Tautologies-Contradictions-and-Contingencies" class="headerlink" title="Tautologies,Contradictions, and Contingencies"></a>Tautologies,Contradictions, and Contingencies</h4><h5 id="Tautologies"><a href="#Tautologies" class="headerlink" title="Tautologies"></a>Tautologies</h5><p>A tautology is a proposition which is always true.</p><p>For example: $p \vee \neg p$ </p><h5 id="Contradictions"><a href="#Contradictions" class="headerlink" title="Contradictions"></a>Contradictions</h5><p>A contradiction is a proposition which is always false.</p><p>For example:$p \wedge \neg p$</p><h5 id="Contingencies"><a href="#Contingencies" class="headerlink" title="Contingencies"></a>Contingencies</h5><p>A contingency is a proposition which is neither a tautology nor a contradiction.</p><p>For example: $p$ </p><h4 id="Logical-Equivalences"><a href="#Logical-Equivalences" class="headerlink" title="Logical Equivalences"></a>Logical Equivalences</h4><p>We say two compound propositions $p$ and $q$ are logically equivalent if $p\leftrightarrow q$ is a tautology or they have the same truth table.</p><p>We write this as $p \Leftrightarrow q$ or as $p\equiv q$ where $p$ and $q$ are compound propositions</p><h5 id="Important-Logical-Equivalences"><a href="#Important-Logical-Equivalences" class="headerlink" title="Important Logical Equivalences"></a>Important Logical Equivalences</h5><h6 id="De-Morgan’s-Law"><a href="#De-Morgan’s-Law" class="headerlink" title="De Morgan’s Law"></a>De Morgan’s Law</h6><p>First Law: $\neg(p\wedge q)\equiv \neg p \vee \neg q$ </p><p>Second Law: $\neg(p\vee q)\equiv \neg p \wedge\neg q$ </p><h6 id="Identity-Laws"><a href="#Identity-Laws" class="headerlink" title="Identity Laws"></a>Identity Laws</h6><p>$p\wedge T\equiv p$ , $p\vee F\equiv p$</p><h6 id="Domination-Laws"><a href="#Domination-Laws" class="headerlink" title="Domination Laws"></a>Domination Laws</h6><p>$p\vee T\equiv T$ , $p\wedge F\equiv F$</p><h6 id="Idempotent-Laws"><a href="#Idempotent-Laws" class="headerlink" title="Idempotent Laws"></a>Idempotent Laws</h6><p>$p\wedge p\equiv p$ , $p\vee p\equiv p$</p><h6 id="Double-Negation-Laws"><a href="#Double-Negation-Laws" class="headerlink" title="Double Negation Laws"></a>Double Negation Laws</h6><p>$\neg(\neg p)\equiv p$ </p><h6 id="Negation-Laws"><a href="#Negation-Laws" class="headerlink" title="Negation Laws"></a>Negation Laws</h6><p>$p\wedge \neg p \equiv F$ , $p\vee \neg p\equiv T$ </p><h6 id="Commutative-Laws"><a href="#Commutative-Laws" class="headerlink" title="Commutative Laws"></a>Commutative Laws</h6><p>$p\vee q\equiv q\vee p$ , $p\wedge q\equiv q\wedge p$</p><h6 id="Associative-Laws"><a href="#Associative-Laws" class="headerlink" title="Associative Laws"></a>Associative Laws</h6><p>$(p\wedge q)\wedge r\equiv q\wedge (p \wedge r)$ , $$(p\vee q)\vee r\equiv q\vee (p \vee r)$$</p><h6 id="Distributive-Laws"><a href="#Distributive-Laws" class="headerlink" title="Distributive Laws"></a>Distributive Laws</h6><p>$(p\vee(q\wedge r))\equiv(p\vee q)\wedge(p\vee r)$ , $(p\wedge(q\vee r))\equiv(p\wedge q)\vee(p\wedge r)$</p><h6 id="Absorption-Laws"><a href="#Absorption-Laws" class="headerlink" title="Absorption Laws"></a>Absorption Laws</h6><p>$p\vee(p\wedge q)\equiv p$ , $p\wedge(p\vee q)\equiv p$</p><h6 id="More-Logical-Equivalences"><a href="#More-Logical-Equivalences" class="headerlink" title="More Logical Equivalences"></a>More Logical Equivalences</h6><p>$p\rightarrow q\equiv\neg p \vee q$</p><p>$p\leftrightarrow q \equiv (p\wedge q)\vee(\neg p\wedge\neg q)$</p><h4 id="Normal-Forms-Not-So-Important"><a href="#Normal-Forms-Not-So-Important" class="headerlink" title="Normal Forms (Not So Important)"></a>Normal Forms (Not So Important)</h4><h5 id="Disjunctive-Normal-Form"><a href="#Disjunctive-Normal-Form" class="headerlink" title="Disjunctive Normal Form"></a>Disjunctive Normal Form</h5><p>A compound proposition is Disjunctive Normal Form (DNF) if it is a disjunction of conjunctions.</p><h5 id="Conjunctive-Normal-Form"><a href="#Conjunctive-Normal-Form" class="headerlink" title="Conjunctive Normal Form"></a>Conjunctive Normal Form</h5><p>A compound proposition is Conjunctive Normal Form (CNF) if it is a conjunction of disjunctions.</p><h4 id="Propositional-Satisfiability"><a href="#Propositional-Satisfiability" class="headerlink" title="Propositional Satisfiability"></a>Propositional Satisfiability</h4><p>A compound proposition is satisfiable if there is an assignment of truth values to its variables that make it true. When no such assignments exist, the compound proposition is unsatisfiable. That mean a compound proposition is unsatisfiable iff it is a  contingency.</p><h3 id="Applications-of-Propositional-Logic"><a href="#Applications-of-Propositional-Logic" class="headerlink" title="Applications of Propositional Logic"></a>Applications of Propositional Logic</h3><h4 id="Translating-English-Sentences"><a href="#Translating-English-Sentences" class="headerlink" title="Translating English Sentences"></a>Translating English Sentences</h4><p>A list of propositions is consistent if there is an assignment of truth values to its variables that make all of them true. When no such assignments exist, the list of propositions is inconsistent.</p><h4 id="Boolean-Search"><a href="#Boolean-Search" class="headerlink" title="Boolean Search"></a>Boolean Search</h4><h4 id="Logic-Puzzles"><a href="#Logic-Puzzles" class="headerlink" title="Logic Puzzles"></a>Logic Puzzles</h4><p>Use Propositional Satisfiability to get the solution.</p><h4 id="Logic-Circuits"><a href="#Logic-Circuits" class="headerlink" title="Logic Circuits"></a>Logic Circuits</h4><p>0 for False</p><p>1for True</p><h3 id="Predicate-Logic"><a href="#Predicate-Logic" class="headerlink" title="Predicate Logic"></a>Predicate Logic</h3><h4 id="Introducing-Predicate-Logic"><a href="#Introducing-Predicate-Logic" class="headerlink" title="Introducing Predicate Logic"></a>Introducing Predicate Logic</h4><p>Predicates : $P(x),M(x)$</p><p>Variables : $x,y,z$</p><p>Quantifiers : $\forall \quad \exists$</p><h5 id="Propositional-functions"><a href="#Propositional-functions" class="headerlink" title="Propositional functions"></a>Propositional functions</h5><p>Propositional functions are a generalization of propositions.</p><p>Variables can be replaced by elements from their domain.</p><p>Propositional functions become propositions when their variables are each replaced by a value from the domain.</p><p>The domain is often denoted by $U$.</p><h5 id="Quantifiers"><a href="#Quantifiers" class="headerlink" title="Quantifiers"></a>Quantifiers</h5><h6 id="Universal-Quantifier"><a href="#Universal-Quantifier" class="headerlink" title="Universal Quantifier"></a>Universal Quantifier</h6><p>for all , $\forall$</p><p>$\forall x P(x)$ asserts $P(x)$ is true for every $x$ in the domain.</p><p>means conjunction.</p><h6 id="Existential-Quantifier"><a href="#Existential-Quantifier" class="headerlink" title="Existential Quantifier"></a>Existential Quantifier</h6><p>for some , $\exist$ </p><p>$\exist x P(x)$ asserts $P(x)$ is true for some $x$ in the domain.</p><p>means disjunction.</p><h6 id="Uniqueness-Quantifier"><a href="#Uniqueness-Quantifier" class="headerlink" title="Uniqueness Quantifier"></a>Uniqueness Quantifier</h6><p>for one and only one , $\exist !$</p><p>$\exist !x P(x)$ asserts $P(x)$ is true for one and only one $x$ in the domain.</p><p>The uniqueness quantifier can be expressed as: $\exist x (P(x) \wedge \forall y (P(y)\rightarrow y &#x3D; x))$</p><h6 id="Quantifiers-with-Restricted-Domains"><a href="#Quantifiers-with-Restricted-Domains" class="headerlink" title="Quantifiers with Restricted Domains"></a>Quantifiers with Restricted Domains</h6><p>The restriction of a universal quantification is the same as the universal quantification of a conditional statement.</p><p>e.g. $\forall x &lt; 0 (x^2&gt;0)$ is the same as $\forall x (x&lt;0\rightarrow x^2 &gt;0)$ </p><p>The restriction of an existential quantification is the same as the universal quantification of a conjunction.</p><p>e.g. $\exist z&gt;0(z^3&#x3D;2)$ is the same as $\exist z(z&gt;0\wedge z^2 &#x3D; 2)$ </p><h6 id="Precedence-of-Quantifiers"><a href="#Precedence-of-Quantifiers" class="headerlink" title="Precedence of Quantifiers"></a>Precedence of Quantifiers</h6><p>The quantifiers $\forall$ and $ \exist$ have higher precedence than all the logical operators.</p><h4 id="Equivalences-in-Predicate-Logic"><a href="#Equivalences-in-Predicate-Logic" class="headerlink" title="Equivalences in Predicate Logic"></a>Equivalences in Predicate Logic</h4><p>Statements involving predicates and quantifiers are logically equivalent iff they have the same truth value.</p><h5 id="De-Morgan’s-Laws-for-quantifiers"><a href="#De-Morgan’s-Laws-for-quantifiers" class="headerlink" title="De Morgan’s Laws for quantifiers"></a>De Morgan’s Laws for quantifiers</h5><p>$\neg\forall x P(x) \equiv \exist x\neg P(x)$</p><p>$\neg\exist x P(x) \equiv \forall x\neg P(x)$</p><h4 id="Translating-English-to-Logic"><a href="#Translating-English-to-Logic" class="headerlink" title="Translating English to Logic"></a>Translating English to Logic</h4><p>Notice the domain !</p><h3 id="Nested-Quantifiers"><a href="#Nested-Quantifiers" class="headerlink" title="Nested Quantifiers"></a>Nested Quantifiers</h3><p>Nested quantifiers are quantifiers where one quantifier is within the scope of another.</p><p>The order of the quantifiers is important , unless all the quantifiers are the same.</p><h3 id="Rules-of-Inference"><a href="#Rules-of-Inference" class="headerlink" title="Rules of Inference"></a>Rules of Inference</h3><h4 id="Valid-Arguments"><a href="#Valid-Arguments" class="headerlink" title="Valid Arguments"></a>Valid Arguments</h4><p>All but the final proposition are called premises. The last statement is the conclusion.</p><p>We can express the premises and the conclusion in predicate logic as an argument.</p><p>The argument is valid if the premises imply the conclusion.</p><p>if the premises are $p_1 , p_2 ,\dots,p_n$ and the conclusion is $q$ ,then $(p_1 \wedge p_2 \wedge\dots\wedge p_n)\rightarrow q$ is a tautology.</p><h4 id="Rules-of-Inference-for-Propositional-Logic"><a href="#Rules-of-Inference-for-Propositional-Logic" class="headerlink" title="Rules of Inference for Propositional Logic"></a>Rules of Inference for Propositional Logic</h4><h5 id="Modus-Ponens"><a href="#Modus-Ponens" class="headerlink" title="Modus Ponens"></a>Modus Ponens</h5><p>$$<br>\begin{align}<br>    &amp;p \rightarrow q \<br>    &amp;p \<br>    \hline<br>    &amp;\therefore q \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $(p\wedge(p\rightarrow q))\rightarrow q$</p><h5 id="Modus-Tollens"><a href="#Modus-Tollens" class="headerlink" title="Modus Tollens"></a>Modus Tollens</h5><p>$$<br>\begin{align}<br>    &amp;p \rightarrow q \<br>    &amp;\neg q \<br>    \hline<br>    &amp;\therefore\neg p \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $(\neg q\wedge(p\rightarrow q))\rightarrow \neg p$</p><h5 id="Hypothetical-Syllogism"><a href="#Hypothetical-Syllogism" class="headerlink" title="Hypothetical Syllogism"></a>Hypothetical Syllogism</h5><p>$$<br>\begin{align}<br>    &amp;p \rightarrow q \<br>    &amp;q \rightarrow r \<br>    \hline<br>    &amp;\therefore p \rightarrow r \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $((p \rightarrow q)\wedge(q \rightarrow r))\rightarrow (p \rightarrow r)$</p><h5 id="Disjunctive-Syllogism"><a href="#Disjunctive-Syllogism" class="headerlink" title="Disjunctive Syllogism"></a>Disjunctive Syllogism</h5><p>$$<br>\begin{align}<br>    &amp;p \vee q \<br>    &amp;\neg p \<br>    \hline<br>    &amp;\therefore q \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $(\neg p \wedge(p \vee q))\rightarrow q$</p><h5 id="Addition"><a href="#Addition" class="headerlink" title="Addition"></a>Addition</h5><p>$$<br>\begin{align}<br>    &amp;p \<br>    \hline<br>    &amp;\therefore p \vee q \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $(p\rightarrow (p \vee q)$</p><h5 id="Simplification"><a href="#Simplification" class="headerlink" title="Simplification"></a>Simplification</h5><p>$$<br>\begin{align}<br>    &amp;p \wedge q \<br>    \hline<br>    &amp;\therefore p \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $(p \wedge q)\rightarrow p $</p><h5 id="Conjunction-1"><a href="#Conjunction-1" class="headerlink" title="Conjunction"></a>Conjunction</h5><p>$$<br>\begin{align}<br>    &amp;p \<br>    &amp;q \<br>    \hline<br>    &amp;\therefore p \wedge q \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $((p)\wedge(q))\rightarrow (p \wedge q)$</p><h5 id="Resolution"><a href="#Resolution" class="headerlink" title="Resolution"></a>Resolution</h5><p>$$<br>\begin{align}<br>    &amp;\neg p \vee r\<br>    &amp;p\vee q \<br>    \hline<br>    &amp;\therefore q \vee r \<br>\end{align}<br>$$</p><p>Corresponding Tautology : $((\neg p \vee r)\wedge(p\vee q))\rightarrow (q \vee r)$</p><h4 id="Rules-of-Inference-for-Quantified-Statements"><a href="#Rules-of-Inference-for-Quantified-Statements" class="headerlink" title="Rules of Inference for Quantified Statements"></a>Rules of Inference for Quantified Statements</h4><h5 id="Universal-Instantiation"><a href="#Universal-Instantiation" class="headerlink" title="Universal Instantiation"></a>Universal Instantiation</h5><p>$$<br>\begin{align}<br>    &amp;\forall xP(x) \<br>    \hline<br>    &amp;\therefore P(c) \<br>\end{align}<br>$$</p><h5 id="Universal-Generalization"><a href="#Universal-Generalization" class="headerlink" title="Universal Generalization"></a>Universal Generalization</h5><p>$$<br>\begin{align}<br>    &amp;P(c) \text{ for an arbitrary } c \<br>    \hline<br>    &amp;\therefore \forall xP(x) \<br>\end{align}<br>$$</p><h5 id="Universal-Modus-Ponens"><a href="#Universal-Modus-Ponens" class="headerlink" title="Universal Modus Ponens"></a>Universal Modus Ponens</h5><p>$$<br>\begin{align}<br>    &amp;\forall x(P(x)\rightarrow Q(x)) \<br>    &amp;P(a) \text{ where $a$ is a particular element in the domain } \<br>    \hline<br>    &amp;\therefore Q(a) \<br>\end{align}<br>$$</p><h5 id="Existential-Instantiation"><a href="#Existential-Instantiation" class="headerlink" title="Existential Instantiation"></a>Existential Instantiation</h5><p>$$<br>\begin{align}<br>    &amp;\exist xP(x) \<br>    \hline<br>    &amp;\therefore P(c) \text{ for some element } c \<br>\end{align}<br>$$</p><h5 id="Existential-Generalization"><a href="#Existential-Generalization" class="headerlink" title="Existential Generalization"></a>Existential Generalization</h5><p>$$<br>\begin{align}<br>    &amp;P(c) \text{ for some element } c \<br>    \hline<br>    &amp;\therefore \exist xP(x) \<br>\end{align}<br>$$</p><h4 id="Common-fallacies"><a href="#Common-fallacies" class="headerlink" title="Common fallacies"></a>Common fallacies</h4><h5 id="Fallacy-of-affirmative-conclusion"><a href="#Fallacy-of-affirmative-conclusion" class="headerlink" title="Fallacy of affirmative conclusion"></a>Fallacy of affirmative conclusion</h5><p>$((p\rightarrow q)\wedge q)\rightarrow p$</p><h5 id="Fallacy-of-negative-hypothesis"><a href="#Fallacy-of-negative-hypothesis" class="headerlink" title="Fallacy of negative hypothesis"></a>Fallacy of negative hypothesis</h5><p>$((p\rightarrow q)\wedge \neg p)\rightarrow \neg q$</p>]]></content>
    
    
    <summary type="html">BUAA SEM MSE IMIS 专业必修课之一，为了巩固学习和更好的复习，整理一下</summary>
    
    
    
    <category term="学习" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/categories/%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    
    <category term="知识点整理" scheme="https://hobeedzc.github.io/tags/%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    
    <category term="离散数学" scheme="https://hobeedzc.github.io/tags/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Python简单算法</title>
    <link href="https://hobeedzc.github.io/2020/05/09/Python%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/"/>
    <id>https://hobeedzc.github.io/2020/05/09/Python%E7%AE%80%E5%8D%95%E7%AE%97%E6%B3%95/</id>
    <published>2020-05-09T00:49:29.000Z</published>
    <updated>2020-06-08T01:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面图片来源于 <a href="https://www.brandnewjimzhang.com/">Jim Zhang</a> 。</p>          </div><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li>算法的定义：算法是一个有穷规则的集合，它用规则规定了解决某一特定类型问题的运算序列。</li><li>计算机求解任何问题都要依赖于算法。</li><li>五项基本特征：有穷、确定、输入、输出、可行。</li><li>算法的描述：自然语言、计算机语言、图形化工具、伪代码。</li><li>数据结构是算法设计的基础。</li></ul><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>按问题本身的性质，通过多重循环一一列举出该问题所有可能的解（不能遗漏，也不能重复），并在逐一列举的过程中，检验每个可能的解是否是问题的真正解，若是， 采用这个解，否则，抛弃它。</p><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>首先依据题目的部分条件确定答案的大致范围，然后在此范 围内对所有可能的解逐一验证，直到全部验证完毕为止。</p><h3 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h3><ol><li>明确枚举的对象：求解变量。</li><li>确定问题解的可能搜索的范围： 用循环或 循环嵌套结构实现。</li><li>写出符合问题的解的条件：采用if语句。</li><li>使用能使程序优化的语句，以便缩小搜索范 围，减少程序运行时间。</li></ol><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>解方程组、求极值，但<strong>数据量不大</strong></p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><a href="https://accoding-cn-443.e1.buaa.edu.cn/contest-ng/index.html#/504/problems">无线网络发射器选址</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">d=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">ditu=[]</span><br><span class="line">ls=[]</span><br><span class="line">ditu_str=<span class="string">&quot;0 &quot;</span>*(<span class="number">129</span>+<span class="number">2</span>*d)</span><br><span class="line"><span class="keyword">for</span> i2 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">129</span>+<span class="number">2</span>*d):</span><br><span class="line">    ditu.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,ditu_str.split())))</span><br><span class="line"><span class="keyword">for</span> i3 <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    x=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">    ditu[x[<span class="number">0</span>]+d][x[<span class="number">1</span>]+d]=x[<span class="number">2</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">129</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">129</span>):</span><br><span class="line">        i_d=i+d</span><br><span class="line">        j_d=j+d</span><br><span class="line">        loc=ditu[i_d][j_d]</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(d):</span><br><span class="line">            loc+=ditu[i_d+<span class="number">1</span>+c][j_d]+ditu[i_d-<span class="number">1</span>-c][j_d]</span><br><span class="line">            loc+=ditu[i_d][j_d+<span class="number">1</span>+c]+ditu[i_d][j_d-<span class="number">1</span>-c]</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(d):</span><br><span class="line">                loc+=ditu[i_d+<span class="number">1</span>+c][j_d+<span class="number">1</span>+a]+ditu[i_d+<span class="number">1</span>+c][j_d-<span class="number">1</span>-a]+ditu[i_d-<span class="number">1</span>-c][j_d-<span class="number">1</span>-a]+ditu[i_d-<span class="number">1</span>-c][j_d+<span class="number">1</span>+a]</span><br><span class="line">        ls.append(loc)</span><br><span class="line">maxout=<span class="built_in">max</span>(ls)</span><br><span class="line">count=ls.count(maxout)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(count,maxout))</span><br></pre></td></tr></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>函数&#x2F;过程&#x2F;子程序在运行 过程中直接或间接调用自身而产生的重入现象</p><h3 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h3><p>把原问题分解为更小的子问题，再从子问题里慢慢寻找原问题的解</p><h3 id="设计思路-1"><a href="#设计思路-1" class="headerlink" title="设计思路"></a>设计思路</h3><ol><li>解题时首先列出递归表达式，然后用程序设计语言的方式把它表现出来</li><li>往往递归都可转化为循环或者模拟调用栈来实现， 但是递归表达更利于理解</li></ol><h3 id="适用范围-1"><a href="#适用范围-1" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li><p>问题的定义是递归的  Fibonacci函数</p></li><li><p>数据的结构是按递归定义的  树的遍历</p></li><li><p>问题的建模策略需要使用递归法去实现  分治法、回溯法</p></li></ul><h3 id="举例-1"><a href="#举例-1" class="headerlink" title="举例"></a>举例</h3><p><a href="https://accoding-cn-443.e1.buaa.edu.cn/problem/3273/index">逛超市</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y, n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> x, y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> f(<span class="number">0.2</span>*x+<span class="number">0.6</span>*y, <span class="number">0.8</span>*x+<span class="number">0.4</span>*y, n-<span class="number">1</span>)</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">x, y = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">x, y = f(x, y, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(x), <span class="built_in">int</span>(y))</span><br></pre></td></tr></table></figure><h2 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h2><h3 id="基本思想-2"><a href="#基本思想-2" class="headerlink" title="基本思想"></a>基本思想</h3><p>将待求解的问题分解成若干个子问题进行分步求解，且每一步总是做出当前最好的选择，以期得到问题最优解。</p><h3 id="设计思路-2"><a href="#设计思路-2" class="headerlink" title="设计思路"></a>设计思路</h3><ol><li>将待求解的问题分解成若干个子问题</li><li>每个子问题的解总是当前最好的选择</li></ol><h3 id="举例-2"><a href="#举例-2" class="headerlink" title="举例"></a>举例</h3><p><a href="https://accoding-cn-443.e1.buaa.edu.cn/problem/3361/index">我不是盘神</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">File = []</span><br><span class="line">XXXDownLoad = [<span class="number">0</span>]</span><br><span class="line">XXNetDisk = [<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    File.append(<span class="built_in">int</span>(<span class="built_in">input</span>()))</span><br><span class="line">File.sort()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(File[:<span class="built_in">len</span>(File)//<span class="number">3</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>,File[:<span class="built_in">len</span>(File)//<span class="number">3</span>]))))</span><br></pre></td></tr></table></figure><h2 id="动归"><a href="#动归" class="headerlink" title="动归"></a>动归</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>把多阶段过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解。</p><h3 id="基本思想-3"><a href="#基本思想-3" class="headerlink" title="基本思想"></a>基本思想</h3><p>将待求解的问题分解成若干相互联系的子问题，先求解子问题，然后根据子问题之间的关系来得到原问题的解 在计算过程中每个子问题只求解一次，将其结果保存在 一张表（最优决策表）中，以便在需要时直接使用。与分治法不同的是，适合于用动态规划法求解的问题，经分解得到的子问题往往不是互相独立的，它们可能共享更小的子问题，即重叠子问题。</p><h3 id="设计思路-3"><a href="#设计思路-3" class="headerlink" title="设计思路"></a>设计思路</h3><ol><li>将问题分解为若干相互联系的子问题。</li><li>写出状态转移方程，求解子问题。</li><li>根据子问题之间的关系来得到原问题的解。</li></ol><h3 id="适用范围-2"><a href="#适用范围-2" class="headerlink" title="适用范围"></a>适用范围</h3><ol><li>重叠子问题：子问题间不相互独立，包含公共子问题</li><li>最优子结构：问题的最优解包含其子问题的最优解， 一个最优化策略的子策略总是最优的</li><li>无后效性：某阶段状态一旦确定，就不受这个状态以 后决策的影响。即某状态以后的过程不会影响以前的状态， 只与当前状态有关</li></ol><h3 id="举例-3"><a href="#举例-3" class="headerlink" title="举例"></a>举例</h3><p><a href="https://www.luogu.com.cn/problem/P1216">数字三角形</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">best_road</span>(<span class="params">n,a</span>):</span><br><span class="line">    ans = [[<span class="number">0</span>]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        temp = []</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> j == <span class="number">0</span> :</span><br><span class="line">                temp.append(a[i][j]+ans[i][j])</span><br><span class="line">            <span class="keyword">elif</span> j == i:</span><br><span class="line">                temp.append(a[i][j]+ans[i][j-<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp.append(a[i][j]+<span class="built_in">max</span>(ans[i][j],ans[i][j-<span class="number">1</span>]))</span><br><span class="line">        ans.append(temp)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(ans[-<span class="number">1</span>])</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">tri = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    tri.append(<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x:<span class="built_in">int</span>(x),<span class="built_in">input</span>().split())))</span><br><span class="line"><span class="built_in">print</span>(best_road(n,tri))</span><br></pre></td></tr></table></figure><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>从数据集合中找到某个或某些特定的数据，并提供它（或它们）所在的位置，这个过程称为查找。</p><p>查找是一个程序中最消耗时间的一部分。</p><h3 id="线性查找"><a href="#线性查找" class="headerlink" title="线性查找"></a>线性查找</h3><p>直接从头到尾搜索集合的查找键，直到找出与查找键相同的数据为止。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>从线性表的一端开始，顺序扫描线性表，依次将线性表中每个元素与查找键相 比较，若当前扫描的元素与查找键相等，则查找成功，返回索引；若整个表扫描完毕都未能找到与查找键匹配的元素，则查找失败。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>当数据量较大时，效率低下。</p><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">line_search</span>(<span class="params"><span class="type">List</span></span>):</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">    <span class="keyword">if</span> <span class="type">List</span>[i] == value:</span><br><span class="line">        <span class="keyword">return</span> i</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><p>必须首先将集合按照<strong>降序或升序排序</strong>，然后利用折半技术搜索集合的查找键。</p><h4 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h4><ul><li><p>查找过程从数组的中间元素开始，如果中间元素正好是要查找的元素， 则搜索过程结束；</p></li><li><p>如果待查找元素大于或者小于中间元素，则在数组大于或小于中间元素 的那一半中查找，而且同样从中间元素开始比较；</p></li><li><p>如果在某一步骤数组为空，则代表找不到；</p></li></ul><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">BinarySearch</span>(<span class="params"><span class="type">List</span>,value,n = <span class="number">0</span></span>):</span><br><span class="line">    m = <span class="built_in">len</span>(<span class="type">List</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> <span class="type">List</span>[m] == value:</span><br><span class="line">        <span class="keyword">return</span> n + m</span><br><span class="line">    <span class="keyword">elif</span> <span class="type">List</span>[m] &lt; value:</span><br><span class="line">        <span class="keyword">return</span> BinarySearch(<span class="type">List</span>[m+<span class="number">1</span>:],value,m)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> BinarySearch(<span class="type">List</span>[:m],value,<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h3 id="哈希查找"><a href="#哈希查找" class="headerlink" title="哈希查找"></a>哈希查找</h3><p>以线性表中每个元素的关键字key为自变量，计算哈希函数值， 以该值作为地址，将元素存入哈希表中；查找某元素时，先计算其哈希函数值， 再在哈希表中查找该地址对应的存储单元。</p><p>哈希查找算法是计算机中查找数据的最快的方法</p><h4 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h4><ul><li><p>为每个待搜索的元素根据某个函数计算出一个存储地址（哈希地址），按地 址将每个元素存入一个表中</p></li><li><p>当要查找某元素时，根据地址精确定位需要查找的元素</p></li></ul><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>将一组原始数据按递增或递减的规律进行重新排列的过程。</p><p>常见的排序算法有选择排序 、插入排序、冒泡排序、 归并排序、快速排序、希尔排序、堆排序、加速堆排序、梳排序等</p><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><h4 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h4><p>首先在所有列表元素中找出最大值的元素，放在A[0]中；接着在不包含A[0]的余下的数组元素中再找出最大值的元素，放置在A[1]中；如此下去，一直到最后一个元素。 </p><h4 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Choose</span>(<span class="params"><span class="type">List</span></span>):</span><br><span class="line">    ans = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">        ans.append(<span class="built_in">max</span>(<span class="type">List</span>))</span><br><span class="line">        <span class="type">List</span>.remove(<span class="built_in">max</span>(<span class="type">List</span>))</span><br><span class="line">    <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">choose</span>(<span class="params"><span class="type">List</span></span>):<span class="comment"># 降序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">        c = <span class="built_in">max</span>(<span class="type">List</span>[i:])</span><br><span class="line">        d = <span class="type">List</span>[i:].index(c)</span><br><span class="line">        <span class="type">List</span>[i],<span class="type">List</span>[i+d] = <span class="type">List</span>[i+d],<span class="type">List</span>[i]</span><br></pre></td></tr></table></figure><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><h4 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h4><p>在每一轮次中依次对待排序数组元素中相邻的两个元素进行比较和交换，将大的放前，小的放后，递减排序。对于n个数据，最多经过n-1轮的比较，即可按降序排序。</p><h4 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">maopao</span>(<span class="params"><span class="type">List</span></span>):<span class="comment">#升序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)-i-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> a[j]&gt;a[j+<span class="number">1</span>]:</span><br><span class="line">        a[j],a[j+<span class="number">1</span>]=a[j+<span class="number">1</span>],a[j]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maopao_1</span>(<span class="params"><span class="type">List</span></span>):<span class="comment">#升序</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)):</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(<span class="type">List</span>)-i-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> a[j]&gt;a[j+<span class="number">1</span>]:</span><br><span class="line">        a[j],a[j+<span class="number">1</span>]=a[j+<span class="number">1</span>],a[j]</span><br><span class="line">                flag = <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="原理-5"><a href="#原理-5" class="headerlink" title="原理"></a>原理</h4><p>可将大的数据集切分为N个子集合，将每一个子集合进行排序，这样就获得了N个已排好顺序的数据集，接下来，将排好序的数据集合并，并使合并后的数据集仍然保持有序，即可实现对整个数据集的排序。</p><p>时空复杂度</p>]]></content>
    
    
    <summary type="html">简单介绍一下Python简单算法</summary>
    
    
    
    <category term="Python" scheme="https://hobeedzc.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://hobeedzc.github.io/tags/Python/"/>
    
    <category term="算法" scheme="https://hobeedzc.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>浅谈大计基学习方法及注意事项</title>
    <link href="https://hobeedzc.github.io/2020/05/03/%E5%A4%A7%E8%AE%A1%E5%9F%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://hobeedzc.github.io/2020/05/03/%E5%A4%A7%E8%AE%A1%E5%9F%BA%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2020-05-03T09:49:29.000Z</published>
    <updated>2020-06-08T01:32:42.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并同步发表于公众号TB学习小助手，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面图片来源于 <a href="https://www.brandnewjimzhang.com/">Jim Zhang</a> 。</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>对于一个从来没有接触过编程的初学者来说，Python可能是目前为止最容易上手的编程语言，但经过半个多学期的学习，有些同学可能感觉学习效果并不理想，甚至觉得学起来还是有些吃力。当然这不排除因疫情影响而导致学习效率、效果下降，但面对这种情况，最好的解决方案是掌握一个高效的学习方法并明确下一学习阶段的主要目标。</p><h2 id="关于学习方法"><a href="#关于学习方法" class="headerlink" title="关于学习方法"></a>关于学习方法</h2><p>相信大家在前半学期也有体会，对于任何一们编程语言，想指望着只靠上课时间就将其完全掌握，是根本不可能的。因为一个人码代码的的能力是和他一共码过多少有直接的关系的。所以要是问有什么直接有效的学习方法，那多刷题、多码代码肯定是最好的答案。五一期间为了帮助同学们更好的掌握基础知识或进行拔高练习，oj上也开放了两场比赛，同学们可以根据自己的实际情况来进行选择性的做题。另外之前海涛学长也为大家准备了洛谷的基础提单，有空余时间的同学也可以做一做其中提到的题目，不过如果实在过不去也不要纠结，因为洛谷对Python不是很友好，经常出现行尾奇怪字符。</p><p>如果时间比较紧，没有时间做题，可以多看看其他人的题解，掌握不同题型的思路，顺便学习一下大佬是如何码代码，这样对将来的学习也是有一定的帮助。</p><p>当然，每种学习方法都是建立在紧跟老师课堂的基础之上的，并且做题也不是唯一的学习方法，经常复习课本或ppt也会对学习产生一定的促进作用，我也使用过其他的学习方法，但对于我个人而言，还是觉得多做题的效果更明显一点。不过不同学习方法的效果也是因人而异，最适合自己的才是最棒的。</p><h2 id="关于下一阶段的学习"><a href="#关于下一阶段的学习" class="headerlink" title="关于下一阶段的学习"></a>关于下一阶段的学习</h2><p>五一过后，可能考试的内容就已经全部学完了，之后学习的科学计算、GUI等等都是不在考试范围之内的。科学计算是指使用numpy库对数据进行处理，包括拟合、插值什么的，GUI是指为你的程序设计一个交互式的界面，就像大家日常使用的APP那样。</p><p>不过不考试并不是意味着大家可以不学或者放松学习了，虽然不考试，但上机还是照常上机、作业还是照常做的，这也都是要算分的。另外科学计算、GUI设计也并不是很简单的内容，难度不比之前的算法低，想学好也是挺不容易的。从长远角度考虑，Python的科学计算是你们以后进入导师课题组、参与科研必须要掌握的一个能力，与其那个时候再复习，不如趁现在把它学懂、搞明白。而GUI的设计可能会在大作业中用到，一个美观的GUI也是老师给高分的理由哈。</p><p>这一部分通常老师会讲的比较详细，跟着老师上课的内容走就完全可以听懂，我觉得这部分是大计基这门课为数不多的只听上课的内容就可以上机实验的部分了QWQ。另外几乎这部分的每个程序都有可视化的输出，比起原来枯燥的数字要有意思多了，大家学起来也会比较轻松。</p><h2 id="关于大作业"><a href="#关于大作业" class="headerlink" title="关于大作业"></a>关于大作业</h2><p>众所周之，大计基是有大作业的，而且这个作业的难度也不低，大家要做好心里准备。大作业一般会给出几个题目，大家从中选择一个去做就好，可以明确的是，大作业不能组队，要自己独立完成。根据去年的情况，我当时是做了很久，所以建议大家合理分配时间，不要赶在ddl前去赶这个大作业。</p><p>做大作业的时候可能会用到很多第三方库，需要做GUI的话可以用tkinter或者PyQt5，需要做科学计算的话可以用numpy，pandas或者scipy，需要做图的话可以用matplotlib或者pyecharts，处理图片可以用PIL，爬虫可以用beautifulsoup4或者selenium，机器学习可以用tensorflow或者pytorch等等，python在每个领域都有海量的第三方库，我只是列举了几个比较常用的供大家参考。</p><p>另外大家在遇到困难时可以在CSDN、博客园等网站上搜索，看看有没有其他人遇到过类似的问题，以及是如何解决的。</p><p>（今年的大作业题目还没有确定，以上都是基于去年情况所言）</p><h2 id="关于期末复习"><a href="#关于期末复习" class="headerlink" title="关于期末复习"></a>关于期末复习</h2><p>对于大计基来说，很多同学可能比较关心有关期末考试的事情，不过由于今年十分特殊，什么时候返校、本学期能不能返校都还没有确定下来，所以大计基什么时候期末考试、甚至有没有期末考试也都是未知数。不过这并不意味着我们可以放松对于大计基（也包括其他任何学科）的期末复习，万一临时通知返校参加期末，要是什么都没准备就真的欲哭无泪了。</p><p>为了防止到时候来个措手不及，我就根据我去年的复习情况来说一下复习时候的要点和注意事项。</p><p>首先是考试范围，我记得我们去年是动态规划不考，以后要学的科学计算和GUI设计不考，最开始学的不上机的那部分也不考，不过今年的情况特殊，这个范围仅供参考，具体范围以考试说明为准。哦对了，考试是开卷考试，可以带课本和带有签名的资料。</p><p>复习的话我建议分三个步骤走，首先是ppt或课本，把老师上课讲的ppt或者课本再快速过一遍，ppt和课本二者选其一就可以，这个主要看你平时习惯使用什么，都看的话一是可能时间不够，二是有可能看着看着就烦了，适得其反是我们最不希望看到的。应对考试的话不在考试范围的内容就可以不用看了，另外因为开卷考试，算法不要求代码全部会手敲，但要能够记住每个算法使用的范围和常见题型，要不然看到题都不知道在考什么就太尴尬了。</p><p>第二步就是再看一遍之前上机实验的习题，从实验一到实验六，再加上基础练习，每道题都要搞明白，如果觉得五一思维试炼太难了就可以跳过，期末考试是比较基础的，应该不会出现思维类的题目（至少我们去年是没有的）。</p><p>最后一步就是练习一些新题目，这个目的是为了保持手感，根据去年的情况，从提交完成大作业到期末考试，其中有3周左右的空档期，也就是说如果不自己练习的话，这三周是不会有任何使用代码的地方的，于是去年很多人考试的时候对代码十分生疏，连基本语法都要查书才能写，这势必会对考试成绩造成一定的影响。因此，为了避免这种情况的发生，每周练习2~3道题是十分必要的，题目不需要太难，主要目的是保持手感。</p><p>当然，第二三步没有严格的顺序，完全可以根据自己的进度随时调整，甚至学习能力比较强的同学这几步同时进行都是没有问题的。</p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>我分享的内容大概就这么多了，非常感谢大家能看到这里，也感谢致真书院TBANK项目组可以给我这个分享的机会以及平台。最后，提前祝大家coding愉快，天天AC，期末取得好成绩！</p>]]></content>
    
    
    <summary type="html">简单介绍一下大计基的学习方法与注意事项</summary>
    
    
    
    <category term="Python" scheme="https://hobeedzc.github.io/categories/Python/"/>
    
    <category term="学习方法" scheme="https://hobeedzc.github.io/categories/Python/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
    
    <category term="Python" scheme="https://hobeedzc.github.io/tags/Python/"/>
    
    <category term="学习方法" scheme="https://hobeedzc.github.io/tags/%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>家有大咖讲义</title>
    <link href="https://hobeedzc.github.io/2020/04/25/%E5%AE%B6%E6%9C%89%E5%A4%A7%E5%92%96/"/>
    <id>https://hobeedzc.github.io/2020/04/25/%E5%AE%B6%E6%9C%89%E5%A4%A7%E5%92%96/</id>
    <published>2020-04-25T09:49:29.000Z</published>
    <updated>2020-05-05T08:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b9a92603070739891aa10add1cfaf546767370de89cbbeb1706b3b5275ae0fb2"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">本文已加密，如需访问请向管理员索要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">家有大咖讲义</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>蓝桥杯 历届真题 日期问题</title>
    <link href="https://hobeedzc.github.io/2020/04/18/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98%20%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/"/>
    <id>https://hobeedzc.github.io/2020/04/18/%E8%93%9D%E6%A1%A5%E6%9D%AF%E5%8E%86%E5%B1%8A%E7%9C%9F%E9%A2%98%20%E6%97%A5%E6%9C%9F%E9%97%AE%E9%A2%98/</id>
    <published>2020-04-18T14:16:18.000Z</published>
    <updated>2020-04-18T14:52:18.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在<a href="https://hobeedzc.github.io/">本站</a>发表，仅供各位小伙伴学习交流使用。</p><p>为避免不必要的纠纷，本文禁止以任何形式转载，谢谢配合。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面源于蓝桥杯<a href="http://dasai.lanqiao.cn/">官网</a>。</p>          </div><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>原题<a href="http://lx.lanqiao.cn/problem.page?gpid=T443">传送门</a></p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>  小明正在整理一批历史文献。这些历史文献中出现了很多日期。小明知道这些日期都在1960年1月1日至2059年12月31日。令小明头疼的是，这些日期采用的格式非常不统一，有采用年&#x2F;月&#x2F;日的，有采用月&#x2F;日&#x2F;年的，还有采用日&#x2F;月&#x2F;年的。更加麻烦的是，年份也都省略了前两位，使得文献上的一个日期，存在很多可能的日期与其对应。</p><p>  比如02&#x2F;03&#x2F;04，可能是2002年03月04日、2004年02月03日或2004年03月02日。</p><p>  给出一个文献上的日期，你能帮助小明判断有哪些可能的日期对其对应吗？</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h3><p>  一个日期，格式是”AA&#x2F;BB&#x2F;CC”。 (0 &lt;&#x3D; A, B, C &lt;&#x3D; 9)</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h3><p>  输出若干个不相同的日期，每个日期一行，格式是”YYYY-MM-DD”。多个日期按从早到晚排列。</p><h3 id="样例输入"><a href="#样例输入" class="headerlink" title="样例输入"></a>样例输入</h3><p>02&#x2F;03&#x2F;04</p><h3 id="样例输出"><a href="#样例输出" class="headerlink" title="样例输出"></a>样例输出</h3><p>2002-03-04</p><p>2004-02-03</p><p>2004-03-02</p><h3 id="数据规模和约定"><a href="#数据规模和约定" class="headerlink" title="数据规模和约定"></a>数据规模和约定</h3><p>峰值内存消耗（含虚拟机） &lt; 256M</p><p>CPU消耗 &lt; 1000ms</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>读完题后其实思路还是蛮清晰的，不过就是 读入-&gt;判断是否合法-&gt;输出 就大功告成了。</p><p>读入数据Python有split()方法，很好搞定。判断的话分三种情况，按题目所说将不同的情况分别进行判断，合法的用列表记录下来，不合法的就跳过。为了保证日期不重复，就在三种情况都判断完之后，将列表转换为集合进行去重。最后按顺序输出就再转换回列表并sort一下。这里因为日期是符合字典序的顺序排列的，所以可以直接sort，而不用自己再写一个排序函数了。</p><p>不过需要注意，既然是处理日期，就要判断某个月是30天还是31天，是不是闰年也要特殊判断。我们在补全年份的时候要注意，由于给定的日期是有范围的，所以要根据不同的情况加上不同的前缀。大于等于60的时候补‘19’，小于‘60’的时候补‘20’.</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">year</span>(<span class="params">y</span>):</span><br><span class="line">    <span class="keyword">if</span> y%<span class="number">4</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">if</span> y%<span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> y%<span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">y,m,d</span>):</span><br><span class="line">    <span class="keyword">if</span> m == <span class="string">&#x27;00&#x27;</span> <span class="keyword">or</span> d == <span class="string">&#x27;00&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(m)&gt;<span class="number">12</span>:</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">int</span>(m) <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">12</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(d) &gt; <span class="number">31</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(y) &gt;= <span class="number">60</span>:</span><br><span class="line">            l.append(<span class="string">&#x27;19&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.append(<span class="string">&#x27;20&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">int</span>(m) <span class="keyword">in</span> [<span class="number">4</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">11</span>]:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(d) &gt; <span class="number">30</span>:</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(y) &gt;= <span class="number">60</span>:</span><br><span class="line">            l.append(<span class="string">&#x27;19&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l.append(<span class="string">&#x27;20&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(y) &gt;= <span class="number">60</span>:</span><br><span class="line">            <span class="keyword">if</span> year(<span class="built_in">int</span>(<span class="string">&#x27;19&#x27;</span>+y)) <span class="keyword">and</span> <span class="built_in">int</span>(d)&lt;=<span class="number">29</span>:</span><br><span class="line">                l.append(<span class="string">&#x27;19&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> year(<span class="built_in">int</span>(<span class="string">&#x27;19&#x27;</span>+y)) <span class="keyword">and</span> <span class="built_in">int</span>(d)&lt;=<span class="number">28</span>:</span><br><span class="line">                l.append(<span class="string">&#x27;19&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> year(<span class="built_in">int</span>(<span class="string">&#x27;20&#x27;</span>+y)) <span class="keyword">and</span> <span class="built_in">int</span>(d)&lt;=<span class="number">29</span>:</span><br><span class="line">                l.append(<span class="string">&#x27;20&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">            <span class="keyword">elif</span> <span class="keyword">not</span> year(<span class="built_in">int</span>(<span class="string">&#x27;20&#x27;</span>+y)) <span class="keyword">and</span> <span class="built_in">int</span>(d)&lt;=<span class="number">28</span>:</span><br><span class="line">                l.append(<span class="string">&#x27;20&#x27;</span>+y+<span class="string">&#x27;-&#x27;</span>+m+<span class="string">&#x27;-&#x27;</span>+d)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">a,b,c = <span class="built_in">list</span>(<span class="built_in">input</span>().split(<span class="string">&#x27;/&#x27;</span>))</span><br><span class="line">l = []</span><br><span class="line">check(a,b,c)</span><br><span class="line">check(c,a,b)</span><br><span class="line">check(c,b,a)</span><br><span class="line">l = <span class="built_in">list</span>(<span class="built_in">set</span>(l))</span><br><span class="line">l.sort()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> l:</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><h2 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h2><p>这个题看上去十分简单，思路也很清晰，但往往这样的题都是笑里藏刀，果不其然，这题的数据确实有点东西。我在提交之后只得了87分，也就是差一个点没有过，但我实在想不到哪里出问题了，在看了好多题解之后（csdn上好多博主真的只给代码，不给解释，我看着就头大。虽然我这个代码没有解释，但思路和避坑足够你a题了），终于明白了问题所在：‘00’。‘00’这个数据只有在用作年份的时候合法，比如‘2000’年，但用作月份和日子都是不合法的。而我之前的程序对‘00’没有特殊判断，所以会输出3个日期，这显然是不合理的。</p><p>于是我赶紧将<code>check</code>函数第一行加上了对‘00’的判断，于是AC了。</p>]]></content>
    
    
    <summary type="html">蓝桥杯 历届真题 日期问题 题解</summary>
    
    
    
    <category term="题解" scheme="https://hobeedzc.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="蓝桥杯" scheme="https://hobeedzc.github.io/categories/%E9%A2%98%E8%A7%A3/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
    
    <category term="题解" scheme="https://hobeedzc.github.io/tags/%E9%A2%98%E8%A7%A3/"/>
    
    <category term="蓝桥杯" scheme="https://hobeedzc.github.io/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>一秒200赞!朋友圈集赞神器分享</title>
    <link href="https://hobeedzc.github.io/2020/04/07/%E4%B8%80%E7%A7%92200%E8%B5%9E-%E6%9C%8B%E5%8F%8B%E5%9C%88%E9%9B%86%E8%B5%9E%E7%A5%9E%E5%99%A8%E5%88%86%E4%BA%AB/"/>
    <id>https://hobeedzc.github.io/2020/04/07/%E4%B8%80%E7%A7%92200%E8%B5%9E-%E6%9C%8B%E5%8F%8B%E5%9C%88%E9%9B%86%E8%B5%9E%E7%A5%9E%E5%99%A8%E5%88%86%E4%BA%AB/</id>
    <published>2020-04-07T12:40:46.000Z</published>
    <updated>2020-04-07T14:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，在本站与微信公众号（HoBee）同步发表。</p><p>如有问题请通过评论区或<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>封面来自于hobee的手机截图。</p><p>如需获得使用链接，可以前往公众号：HoBee，并在后台回复‘集赞’即可</p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>今天hobee在浏览公众号时，无意间看到了一手非常珍贵的资料，而且完全免费（具体是啥我就不说了，嘻嘻嘻）。心情激动的hobee赶紧去了解如何获得资料，不过虽然打着免费的旗号，但天下没有免费的午餐，所以肯定是要付出点代价的。人家说要转发到朋友圈，然后集齐10个赞，凭截图领取资料。</p><p>那么问题来了，像hobee脸皮这么薄的人，怎么好意思去朋友圈向其他小伙伴要赞呢。另外，就算真的集赞，也是个非常麻烦的事情，毕竟赞不是瞬间就可以集好的东西。有什么轻松又简便的方法吗？hobee找了好久，终于找到了一款集赞神器，也就是今天的主角儿！</p><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>这个网站的功能很简单，就是单纯的给朋友圈集赞，现在好像还推出了加评论的功能，真的是越来越强大了！总重要的一点是，截止到这篇文章发表，这个网站处于完全免费的状态。不过我之前使用的时候好像出现过收费的情况（可见本篇文章封面，免费版会在图片中间生成标记，无法使用），但现在应该已经取消了。</p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>首先进入网站（网址在公众号HoBee后台回复：“集赞”即可获取）可以看到网站的主要操作界面</p><p><img src="/" class="lazyload" data-src="/img/insert/jizan/1.jpg"  alt="网站界面"></p><p>顶部第一个操作就是选择你要集赞的数量，头像风格选项可以根据你的选择的年代生成不同风格的点赞头像，这个就有点意思了，盲猜70年代会生成一堆风景照，00年代会生成大量二次元（bushi</p><p>下面就是我刚刚提到的更新内容，可以根据需要p上评论，毕竟一个pyq好几百赞0评论也是挺尴尬的。后面的更多设置具体是啥我也没有看，有兴趣的小伙伴可以自己去探索。（刚刚忍不住去看了下，就竟然是控制男女比例的，锦上添花…</p><p>接下来进入实战环节，我先随便挑选一个以前的没有人赞的pyq（居然真的有0赞pyq，好可怜…QWQ）</p><p><img src="/" class="lazyload" data-src="/img/insert/jizan/3.jpg"  alt="真.零赞朋友圈"></p><p>然后点击加号上传图片，之后选择好相应的配置，点击立即生成就好了。</p><p><img src="/" class="lazyload" data-src="/img/insert/jizan/4.jpg"  alt="开始"></p><p>稍等片刻就会提示已经生成完成，此时只需要长按图片进行保存即可。</p><p><img src="/" class="lazyload" data-src="/img/insert/jizan/5.jpg"  alt="完成"></p><p>下面是集赞完成后的图片，是不是和真的一模一样，看不出丝毫破绽。</p><p><img src="/" class="lazyload" data-src="/img/insert/jizan/2.jpg"  alt="集赞完成的图片"></p><h2 id="写在结尾"><a href="#写在结尾" class="headerlink" title="写在结尾"></a>写在结尾</h2><p>当然，这种技术仅限于应急时使用，hobee并不推荐大家在不必要的时候使用。因为随着这种快速集赞技术（其实就是p图技术）的普及，会使越来越多的商家本想借助集赞来推广自己产品的愿望逐渐破灭，进而导致商家减少提供免费的产品与服务，或者降低免费产品的质量。这对于广大消费者来说其实是非常不利的。</p><p>另外，正所谓道高一尺，魔高一丈，现在许都商家也在完善自己的审查机制，出现了加好友亲自看朋友圈、录小视频等新奇的要求，这种静态图片式的pyq集赞方式适用范围也越来越小了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;div class=&quot;note success&quot;&gt;
            &lt;p&gt;本文由Hobee原创，在本站与微信公众号（HoBee）同步发表。&lt;/p&gt;&lt;p&gt;如有问题请通过评论区或&lt;a href=&quot;mailto:lzqpublic@163.com&quot;&gt;邮件&lt;/a&gt;联系作者。&lt;/</summary>
      
    
    
    
    <category term="技巧" scheme="https://hobeedzc.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    <category term="神奇网站" scheme="https://hobeedzc.github.io/categories/%E6%8A%80%E5%B7%A7/%E7%A5%9E%E5%A5%87%E7%BD%91%E7%AB%99/"/>
    
    <category term="快速集赞" scheme="https://hobeedzc.github.io/categories/%E6%8A%80%E5%B7%A7/%E7%A5%9E%E5%A5%87%E7%BD%91%E7%AB%99/%E5%BF%AB%E9%80%9F%E9%9B%86%E8%B5%9E/"/>
    
    
    <category term="技巧分享" scheme="https://hobeedzc.github.io/tags/%E6%8A%80%E5%B7%A7%E5%88%86%E4%BA%AB/"/>
    
    <category term="神奇网站" scheme="https://hobeedzc.github.io/tags/%E7%A5%9E%E5%A5%87%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title>Python常见异常及其简单处理</title>
    <link href="https://hobeedzc.github.io/2020/04/03/Python%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E5%A4%84%E7%90%86/"/>
    <id>https://hobeedzc.github.io/2020/04/03/Python%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8%E5%8F%8A%E5%85%B6%E7%AE%80%E5%8D%95%E5%A4%84%E7%90%86/</id>
    <published>2020-04-03T11:50:02.000Z</published>
    <updated>2020-06-08T01:38:14.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在<a href="https://hobeedzc.github.io/">本站</a>发表。</p><p>如需转载请注明出处，万分感谢。</p><p>如有问题请通过<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面图片来源于 <a href="https://www.brandnewjimzhang.com/">Jim Zhang</a> 。</p><p>本讲义中部分内容参考自以下文章或网站： </p><p><a href="https://docs.python.org/zh-cn/3.8/c-api/exceptions.html#standard-exceptions">异常处理 — Python 3.8.2 文档</a> </p><p><a href="https://www.jianshu.com/p/2d54fefc24e2">Python-异常处理 - 简书</a></p><p><a href="https://www.cnblogs.com/Gomind/p/10979887.html">python常见的报错提示 - GoMind - 博客园</a></p>          </div><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>之所以要写这篇文章，一方面是因为我们在coding的时候经常遇到代码跑不通的情况，这还怎么让我开开心心的<del>写bug</del>？另外hobee在答疑的时候也经常遇到小伙伴来问为什么某一段代码会报错，可能是之前玩电脑的时候，遇到报错就像遇到‘歪比巴卜’一样傻也看不懂，就以为Python的报错也差不多，解决报错超出自己的能力范围，直接跑去问老师或助教，但其实很多情况下Python的报错信息写的都是很清楚的，最大的障碍应该是语言障碍，只要明白那行英文说的是什么东西，解决起来不是什么问题。</p><p>这篇文章将常见的Python错误类型与处理方法进行总结，可供有需要的小伙伴学习交流使用。</p><h2 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h2><h3 id="AttributeError"><a href="#AttributeError" class="headerlink" title="AttributeError"></a>AttributeError</h3><p>AttributeError：属性错误，特性引用和赋值失败时会引发属性错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.append()</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">AttributeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;append&#x27;</span></span><br></pre></td></tr></table></figure><p>出现这个异常，一种情况是调用了错误的方法，根据异常提示也可以看出，a是一个整型变量，但append是列表类型的一个方法，所以对一个整型变量使用列表的方法自然会出现问题。</p><p>解决方式就是检查报错处的内容，根据报错信息看看有没有出现调用方法的问题。</p><h3 id="NameError"><a href="#NameError" class="headerlink" title="NameError"></a>NameError</h3><p>NameError：试图访问的变量名不存在</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;b&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>当我尝试访问一个没有定义过的变量的时候，程序就会抛出这个异常。</p><p>解决方法也很简单，就是在使用之前现给它初始化一下。</p><h3 id="SyntaxError"><a href="#SyntaxError" class="headerlink" title="SyntaxError"></a>SyntaxError</h3><p>SyntaxError：语法错误，代码形式错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a=b:</span><br><span class="line"></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a=b:</span><br><span class="line">        ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>进行条件判断的时候使用’&#x3D;’而不是’&#x3D;&#x3D;’会导致语法错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a</span><br><span class="line"></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> a</span><br><span class="line">       ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>当使用if、while、for、class、def但末尾没有加冒号，或使用中文符号时，也会抛出该异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(Hello!<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">          </span></span><br><span class="line"><span class="string">  File &quot;&lt;stdin&gt;&quot;, line 1</span></span><br><span class="line"><span class="string">    print(Hello!&#x27;</span>)</span><br><span class="line">               ^</span><br><span class="line">SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure><p>字符串少一般引号，函数调用少一半括号等等，均会抛出异常。</p><p>这种异常通常会明确指出异常位置，找到相应错误进行修改就可以了。</p><h3 id="KeyError"><a href="#KeyError" class="headerlink" title="KeyError"></a>KeyError</h3><p>KeyError：使用了映射中不存在的关键字（键）时引发的关键字错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(a[<span class="string">&#x27;key&#x27;</span>])</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;key&#x27;</span></span><br></pre></td></tr></table></figure><p>由于字典a中并没有’key’这个键，所以尝试调用时会抛出KeyError</p><p>解决方法是在调用之前先将这个键加入到字典中，如果之前已经加入，检查一下是否在之后将它删除了。</p><h3 id="IndexError"><a href="#IndexError" class="headerlink" title="IndexError"></a>IndexError</h3><p>IndexError：索引错误，使用的索引不存在，常索引超出序列范围，什么是索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">10</span>]</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><p>这种错误通常表现为数组、字符串、元组等类型的越界访问。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">del</span> a[i]</span><br><span class="line"></span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:/Users/和毕/Desktop/1.py&quot;</span>, line <span class="number">5</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">del</span> a[i]</span><br><span class="line">IndexError: <span class="built_in">list</span> assignment index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><p>在上面这个情况下，看上去没问题但会抛出越界异常，是因为在循环中我们将想要遍历的数组修改了，增加元素还好，一旦删除了元素，会导致数组长度变短，如果循环次数还是原来的数组长度的话，必然会导致数组越界。这个问题一般很难发现，所以当出现越界但又不知道到底是哪里出现问题的话，可以往这个方向思考一下。</p><h3 id="IndentationError"><a href="#IndentationError" class="headerlink" title="IndentationError"></a>IndentationError</h3><p>IndentationError：缩进错误，错误的使用缩进量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> a:</span><br><span class="line"><span class="meta">... </span>a = <span class="number">1</span></span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    ^</span><br><span class="line">IndentationError: expected an indented block</span><br></pre></td></tr></table></figure><p>由于Python是对缩进敏感的，同一逻辑层应该保持相同的缩进，<code>&quot;:&quot;</code>标记一个新的逻辑层， <code>增加缩进</code>进入下一个代码层，<code>减少缩进</code>返回上一个代码层。如果错误使用就会抛出这个异常。</p><p>解决方法就是就错误位置增加或减少相应的缩进。</p><p>更多有关缩进的信息可以浏览<a href="https://blog.csdn.net/wosind/article/details/100012180">这篇文章</a>。</p><h3 id="TypeError"><a href="#TypeError" class="headerlink" title="TypeError"></a>TypeError</h3><p>TypeError：类型错误，内建操作或是函数应于在了错误类型的对象时会引发类型错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;Welcome to hobees blog.&#x27;</span></span><br><span class="line">a[<span class="number">13</span>] = <span class="string">&#x27;r&#x27;</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:/Users/和毕/Desktop/1.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a[<span class="number">13</span>] = <span class="string">&#x27;r&#x27;</span></span><br><span class="line">TypeError: <span class="string">&#x27;str&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>通常情况下，尝试对字符串进行修改将会抛出类型错误异常。众所周知，字符串是不可修改的数据类型。</p><p>一般可以通过字符串拼接的方法进行解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">&#x27;Welcome to hobees blog.&#x27;</span></span><br><span class="line">a = a[:<span class="number">13</span>] +<span class="string">&#x27;r&#x27;</span> + a[<span class="number">14</span>:]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">Welcome to horees blog.</span><br></pre></td></tr></table></figure><h3 id="ZeroDivisonError"><a href="#ZeroDivisonError" class="headerlink" title="ZeroDivisonError"></a>ZeroDivisonError</h3><p>ZeroDivisonError：除数为0，在用除法操作时，第二个参数为0时引发了该错误</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ZeroDivisionError: division by zero</span><br></pre></td></tr></table></figure><p>这个就不用多说了吧…</p><h3 id="ValueError"><a href="#ValueError" class="headerlink" title="ValueError"></a>ValueError</h3><p>ValueError：值错误，传给对象的参数类型不正确，像是给int()函数传入了字符串数据类型的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;0b123&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;0b123&#x27;</span></span><br></pre></td></tr></table></figure><p>当给函数传入不正确的参数时，会抛出值错误异常。检查参数类型和数量，重新传入正确的即可。</p><h2 id="不常见异常类型"><a href="#不常见异常类型" class="headerlink" title="不常见异常类型"></a>不常见异常类型</h2><p>不常见的异常类型太多了，通常情况下也很难遇到，我就不介绍了，欢迎有兴趣的小伙伴进行补充。</p><h2 id="简单异常处理"><a href="#简单异常处理" class="headerlink" title="简单异常处理"></a>简单异常处理</h2><h3 id="try-except"><a href="#try-except" class="headerlink" title="try-except"></a>try-except</h3><p>try是Python中的一个保留字，具体作用是尝试执行try中的代码内容，如果try后的语句发生了异常，则跳出该段语句，执行except中的内容。</p><p>except可以捕捉到异常类型，具体用法可分为以下几类：</p><ul><li><p>except:<br> 只要try中出现异常，就会执行except中的代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a[<span class="number">100</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>因此，只要你的代码使用了以下内容，就永远不会报错（开玩笑呢你可别当真，不报错不代表没有错误</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    code</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>except Type:<br>只有出现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a[<span class="number">100</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:/Users/和毕/Desktop/1.py&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    a[<span class="number">100</span>] = <span class="number">1</span></span><br><span class="line">IndexError: <span class="built_in">list</span> assignment index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure></li><li><p>except Type as data:<br> 获取异常信息存入data</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line">data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a[<span class="number">100</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    </span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="built_in">list</span> assignment index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure></li><li><p>except (Type1,Type2,Type3):</p><p>同时处理多种异常,捕捉到元组中任何一种异常，都会执行except中的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a[<span class="number">100</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> (ValueError,IndexError):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p>except Type1:<br>except Type2:<br>分类处理异常,类似c语言中的switch-case，捕捉到不同异常进行不同的操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = []</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    a[<span class="number">100</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>try和except应该成对出现，只有try而没有except会抛出语法错误。</strong></p><p><strong>千万要注意，通常情况下，try可以利用异常，但无法解决异常。虽然使用try之后不会再出现异常，但只是Python将这个异常‘藏’了起来，并没有使之解决，所以平时不建议遇到异常就使用try。</strong></p><h3 id="raise"><a href="#raise" class="headerlink" title="raise"></a>raise</h3><p>这玩意我自己也没用过，如果有时间我再补充<del>（我鸽了</del>…具体使用可以参考本文开头出现的第三篇文章。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>以上就是常见的异常类型及其简单的解决方案，如果有遗漏的内容欢迎在评论区补充，如果有错误的内容也欢迎在评论区中指正。</p>]]></content>
    
    
    <summary type="html">有关Python常见异常及其简单处理的介绍，可供有需要的小伙伴学习交流使用。</summary>
    
    
    
    <category term="教程" scheme="https://hobeedzc.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://hobeedzc.github.io/categories/%E6%95%99%E7%A8%8B/Python/"/>
    
    <category term="异常处理" scheme="https://hobeedzc.github.io/categories/%E6%95%99%E7%A8%8B/Python/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
    
    <category term="Python" scheme="https://hobeedzc.github.io/tags/Python/"/>
    
    <category term="异常处理" scheme="https://hobeedzc.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Python 列表使用指南</title>
    <link href="https://hobeedzc.github.io/2020/04/01/Python%20%E5%88%97%E8%A1%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://hobeedzc.github.io/2020/04/01/Python%20%E5%88%97%E8%A1%A8%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</id>
    <published>2020-04-01T06:19:01.000Z</published>
    <updated>2020-06-08T01:38:22.000Z</updated>
    
    <content type="html"><![CDATA[<div class="note success">            <p>本文由Hobee原创，并仅在本站发表。</p><p>如需转载请注明出处，万分感谢。</p><p>如有问题请通过<a href="mailto:lzqpublic@163.com">邮件</a>联系作者。</p>          </div><div class="note info">            <p>本文封面图片来源于 <a href="https://www.brandnewjimzhang.com/">Jim Zhang</a> 。</p><p>本讲义中部分内容参考自<a href="https://www.runoob.com/python3/python3-list.html">菜鸟教程</a> 。</p><p>本讲义中进阶操作参考自 <a href="https://mp.weixin.qq.com/s/vtjIGZ2WJAQTkIE09twPkQ">关于Python列表操作，最常见的10个问题</a> 。</p>          </div><h2 id="简介-什么是列表"><a href="#简介-什么是列表" class="headerlink" title="简介-什么是列表"></a>简介-什么是列表</h2><ul><li><p>序列是Python中最基本的数据结构。序列中的每个元素都分配一个数字 - 它的位置，或索引，第一个索引是0，第二个索引是1，依此类推。</p></li><li><p>Python有6个序列的内置类型，但最常见的是列表和元组。</p></li><li><p>序列都可以进行的操作包括索引，切片，加，乘，检查成员。</p></li><li><p>此外，Python已经内置确定序列的长度以及确定最大和最小的元素的方法。</p></li><li><p>列表是最常用的Python数据类型，它可以作为一个方括号内的逗号分隔值出现。</p></li><li><p>列表的数据项不需要具有相同的类型</p></li></ul><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p><strong>创建列表</strong></p><ul><li><p>[]</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(a)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;list&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1</span><br><span class="line">[<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure></li><li><p>list()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#参数必须为可迭代变量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="number">1</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;int&#x27;</span> <span class="built_in">object</span> <span class="keyword">is</span> <span class="keyword">not</span> iterable</span><br></pre></td></tr></table></figure></li></ul><p><strong>访问元素</strong></p><p>使用下标索引来访问列表中的值，同样你也可以使用方括号的形式截取字符，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>];</span><br><span class="line">list2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> ];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list1[0]: &quot;</span>, list1[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;list2[1:5]: &quot;</span>, list2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">-----------------------------------</span><br><span class="line">list1[<span class="number">0</span>]: Google</span><br><span class="line">list2[<span class="number">1</span>:<span class="number">5</span>]: [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><p><strong>更新列表</strong></p><p>你可以对列表的数据项进行修改或更新，你也可以使用append()方法来添加列表项，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;第三个元素为 : &quot;</span>, <span class="built_in">list</span>[<span class="number">2</span>])</span><br><span class="line"><span class="built_in">list</span>[<span class="number">2</span>] = <span class="number">2001</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;更新后的第三个元素为 : &quot;</span>, <span class="built_in">list</span>[<span class="number">2</span>])</span><br><span class="line">----------------------------------------</span><br><span class="line">第三个元素为 :  <span class="number">1997</span></span><br><span class="line">更新后的第三个元素为 :  <span class="number">2001</span></span><br></pre></td></tr></table></figure><p><strong>删除元素</strong></p><ul><li><p>del</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;原始列表 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">del</span> <span class="built_in">list</span>[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;删除第三个元素 : &quot;</span>, <span class="built_in">list</span>)</span><br><span class="line">-----------------------------------------</span><br><span class="line">原始列表 :  [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line">删除第三个元素 :  [<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">2000</span>]</span><br></pre></td></tr></table></figure></li><li><p>pop()</p></li><li><p>remove()</p></li></ul><p><strong>脚本操作符</strong></p><table><thead><tr><th align="left">Python 表达式</th><th align="left">结果</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">len([1, 2, 3])</td><td align="left">3</td><td align="left">长度</td></tr><tr><td align="left">[1, 2, 3] + [4, 5, 6]</td><td align="left">[1, 2, 3, 4, 5, 6]</td><td align="left">组合</td></tr><tr><td align="left">[‘Hi!’] * 4</td><td align="left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td align="left">重复</td></tr><tr><td align="left">3 in [1, 2, 3]</td><td align="left">True</td><td align="left">元素是否存在于列表中</td></tr><tr><td align="left">for x in [1, 2, 3]: print(x, end&#x3D;” “)</td><td align="left">1 2 3</td><td align="left">迭代</td></tr></tbody></table><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p>Python包含以下函数:（大多和字符串相似）</p><table><thead><tr><th align="left">序号</th><th align="left">函数</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-len.html">len(list)</a> 列表元素个数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-max.html">max(list)</a> 返回列表元素最大值</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-min.html">min(list)</a> 返回列表元素最小值</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-list.html">list(seq)</a> 将元组转换为列表</td></tr></tbody></table><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>Python包含以下方法:（大多和字符串相似）</p><table><thead><tr><th align="left">序号</th><th align="left">方法</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-append.html">list.append(obj)</a> 在列表末尾添加新的对象</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-count.html">list.count(obj)</a> 统计某个元素在列表中出现的次数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-extend.html">list.extend(seq)</a> 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-index.html">list.index(obj)</a> 从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-insert.html">list.insert(index, obj)</a> 将对象插入列表</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-pop.html">list.pop([index&#x3D;-1])</a> 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-remove.html">list.remove(obj)</a> 移除列表中某个值的第一个匹配项</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-reverse.html">list.reverse()</a> 反向列表中元素</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-sort.html">list.sort( key&#x3D;None, reverse&#x3D;False)</a> 对原列表进行排序</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-clear.html">list.clear()</a> 清空列表</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/python3/python3-att-list-copy.html">list.copy()</a> 复制列表</td></tr></tbody></table><h2 id="进阶操作"><a href="#进阶操作" class="headerlink" title="进阶操作"></a>进阶操作</h2><p>本部分参考自<a href="https://mp.weixin.qq.com/s/vtjIGZ2WJAQTkIE09twPkQ">关于Python列表操作，最常见的10个问题</a></p><h3 id="1、迭代列表，如何访问列表下标索引"><a href="#1、迭代列表，如何访问列表下标索引" class="headerlink" title="1、迭代列表，如何访问列表下标索引"></a>1、迭代列表，如何访问列表下标索引</h3><p>普通版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">items = [<span class="number">8</span>, <span class="number">23</span>, <span class="number">45</span>]</span><br><span class="line"><span class="keyword">for</span> index <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(items)):</span><br><span class="line">    <span class="built_in">print</span>(index, <span class="string">&quot;--&gt;&quot;</span>, items[index])</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span> --&gt; <span class="number">8</span></span><br><span class="line"><span class="number">1</span> --&gt; <span class="number">23</span></span><br><span class="line"><span class="number">2</span> --&gt; <span class="number">45</span></span><br></pre></td></tr></table></figure><p>优雅版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items):</span><br><span class="line">    <span class="built_in">print</span>(index, <span class="string">&quot;--&gt;&quot;</span>, item)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">0</span> --&gt; <span class="number">8</span></span><br><span class="line"><span class="number">1</span> --&gt; <span class="number">23</span></span><br><span class="line"><span class="number">2</span> --&gt; <span class="number">45</span></span><br></pre></td></tr></table></figure><p><code>enumerate</code> 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> index, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(items, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(index, <span class="string">&quot;--&gt;&quot;</span>, item)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="number">1</span> --&gt; <span class="number">8</span></span><br><span class="line"><span class="number">2</span> --&gt; <span class="number">23</span></span><br><span class="line"><span class="number">3</span> --&gt; <span class="number">45</span></span><br></pre></td></tr></table></figure><h3 id="2、append-与-extend-方法有什么区别"><a href="#2、append-与-extend-方法有什么区别" class="headerlink" title="2、append 与 extend 方法有什么区别"></a>2、append 与 extend 方法有什么区别</h3><p><code>append</code>表示把某个数据当做新元素<strong>追加</strong>到列表的最后面，它的参数可以是任意对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.append(y)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]</span><br></pre></td></tr></table></figure><p><code>extend</code> 的参数必须是一个可迭代对象，表示把该对象里面的所有元素逐个地追加到列表的后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">y = [<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">x.extend(y)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等价于：</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">    x.append(i)</span><br></pre></td></tr></table></figure><h3 id="3、检查列表是否为空"><a href="#3、检查列表是否为空" class="headerlink" title="3、检查列表是否为空"></a>3、检查列表是否为空</h3><p>普通版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(items) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;空列表&quot;</span>)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> items == []:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;空列表&quot;</span>)</span><br></pre></td></tr></table></figure><p>优雅版：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> items:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;空列表&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4、如何理解切片"><a href="#4、如何理解切片" class="headerlink" title="4、如何理解切片"></a>4、如何理解切片</h3><p>切片用于获取列表中指定范围的子集，语法非常简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">items[start:end:step]</span><br></pre></td></tr></table></figure><p>从 start 到 end-1 位置之间的元素。step 表示步长，默认为1，表示连续获取，如果 step 为 2 就表示每隔一个元素获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:<span class="number">8</span>] <span class="comment"># 第3到第8位置之间的元素</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:<span class="number">8</span>:<span class="number">2</span>] <span class="comment"># 第3到第8位置之间的元素，每隔一个元素获取</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">5</span>]   <span class="comment"># 省略start表示从第0个元素开始</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:]  <span class="comment"># 省略end表示到最后一个元素</span></span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::]  <span class="comment"># 都省略相当于拷贝一个列表，这种拷贝属于浅拷贝</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br></pre></td></tr></table></figure><h3 id="5、如何拷贝一个列表对象"><a href="#5、如何拷贝一个列表对象" class="headerlink" title="5、如何拷贝一个列表对象"></a>5、如何拷贝一个列表对象</h3><p>第一种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_list = old_list[:]</span><br></pre></td></tr></table></figure><p>第二种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">new_list = <span class="built_in">list</span>(old_list)</span><br></pre></td></tr></table></figure><p>第三种方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line">new_list = copy.copy(old_list)</span><br><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line">new_list = copy.deepcopy(old_list)</span><br><span class="line"><span class="comment">#据我观察这两个在Python3.7中已经没有区别了</span></span><br></pre></td></tr></table></figure><h3 id="6、如何获取列表中的最后一个元素"><a href="#6、如何获取列表中的最后一个元素" class="headerlink" title="6、如何获取列表中的最后一个元素"></a>6、如何获取列表中的最后一个元素</h3><p>索引列表中的元素不仅支持正数还支持负数，正数表示从列表的左边开始索引，负数表示从列表的右边开始索引，获取最后一个元素有两种方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="built_in">len</span>(a)-<span class="number">1</span>]</span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">1</span>]</span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="7、如何对列表进行排序"><a href="#7、如何对列表进行排序" class="headerlink" title="7、如何对列表进行排序"></a>7、如何对列表进行排序</h3><p>列表排序有两种方式，一种是列表自带的方法 <code>list.sort()</code>，一种是内建函数 <code>sorted(list)</code>。复杂的数据类型可通过指定 <code>key</code>参数进行排序。由字典构成的列表，根据字典元素中的age字段进行排序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">items = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> item: item.get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure><p>列表有 <code>sort</code>方法，用于对原列表进行重新排序，指定 key 参数，key 是匿名函数，item 是列表中的字典元素，我们根据字典中的age进行排序，默认是按升序排列，指定 reverse&#x3D;True 按降序排列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">items.sort(key=<span class="keyword">lambda</span> item: item.get(<span class="string">&quot;age&quot;</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;]</span><br></pre></td></tr></table></figure><p>如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数 sorted ，该函数返回新列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">items = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line">new_items = <span class="built_in">sorted</span>(items, key=<span class="keyword">lambda</span> item: item.get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_items)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="8、如何移除列表中的元素"><a href="#8、如何移除列表中的元素" class="headerlink" title="8、如何移除列表中的元素"></a>8、如何移除列表中的元素</h3><p>删除列表中的元素有三种方式</p><p>remove 移除某个元素，而且只能移除第一次出现的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要移除的元素不在列表中，则抛出 ValueError 异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">7</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span>·</span><br></pre></td></tr></table></figure><p>del指令：根据指定的位置移除某元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 移除第一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">1</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当超出列表的下表索引时，抛出IndexError的异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">7</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> assignment index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><p>pop函数 与del 类似，但是 pop 函数可以返回移除的元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样，当超出列表的下表索引时，抛出IndexError的异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">7</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: pop index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure><h3 id="9、如何连接两个列表"><a href="#9、如何连接两个列表" class="headerlink" title="9、如何连接两个列表"></a>9、如何连接两个列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">listone = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">listtwo = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">mergedlist = listone + listtwo</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mergelist)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>列表实现了 <code>+</code> 的运算符重载，使得 <code>+</code> 不仅支持数值相加，还支持两个列表相加，只要你实现了 对象的 <code>__add__</code>操作，任何对象都可以实现 <code>+</code> 操作，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, age</span>):</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__repr__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;User(%d)&#x27;</span> % self.age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self, other</span>):</span><br><span class="line">        age = self.age + other.age</span><br><span class="line">        <span class="keyword">return</span> User(age)</span><br><span class="line"></span><br><span class="line">user_a = User(<span class="number">10</span>)</span><br><span class="line">user_b = User(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">c = user_a + user_b</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">User(<span class="number">30</span>)</span><br></pre></td></tr></table></figure><h3 id="10、如何随机获取列表中的某个元素"><a href="#10、如何随机获取列表中的某个元素" class="headerlink" title="10、如何随机获取列表中的某个元素"></a>10、如何随机获取列表中的某个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">items = [<span class="number">8</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">78</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(items)</span><br><span class="line"><span class="number">78</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(items)</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(items)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><strong>list与string区别</strong></p><p>list可修改，str不可修改</p><p><strong>引用型操作与加工型操作</strong></p><p>引用型有return</p><p>加工型一般没有return</p>]]></content>
    
    
    <summary type="html">有关Python列表类型的使用说明和进阶操作。</summary>
    
    
    
    <category term="教程" scheme="https://hobeedzc.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    <category term="Python" scheme="https://hobeedzc.github.io/categories/%E6%95%99%E7%A8%8B/Python/"/>
    
    <category term="列表" scheme="https://hobeedzc.github.io/categories/%E6%95%99%E7%A8%8B/Python/%E5%88%97%E8%A1%A8/"/>
    
    
    <category term="Python" scheme="https://hobeedzc.github.io/tags/Python/"/>
    
    <category term="教程" scheme="https://hobeedzc.github.io/tags/%E6%95%99%E7%A8%8B/"/>
    
    <category term="列表" scheme="https://hobeedzc.github.io/tags/%E5%88%97%E8%A1%A8/"/>
    
  </entry>
  
</feed>
